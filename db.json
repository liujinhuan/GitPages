{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.css","path":"main.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.svg","path":"fonts/tooltip.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1505383843000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1505383843000},{"_id":"themes/yilia/README.md","hash":"4751bbbfe4ea5f2acd3d864de893e19c5a3d6878","modified":1505383843000},{"_id":"themes/yilia/_config.yml","hash":"80f96e63475a0c00f42308682ec63d3dd01e7986","modified":1505383843000},{"_id":"themes/yilia/package.json","hash":"2535ba634f8b4ea2ddceff2543907859fc54a443","modified":1505383843000},{"_id":"themes/yilia/webpack.config.js","hash":"447b7469d79be7cf86a28805e0ef56d6e98895e0","modified":1505383843000},{"_id":"source/_posts/XSS攻击学习笔记.md","hash":"d5b5e03388db37bcbd9f69d0bc0bd1ee7b64377f","modified":1505383842000},{"_id":"source/_posts/MongoDB的增删改查.md","hash":"a92127a1d18f536de356123bd235855cc6399ca0","modified":1505383842000},{"_id":"source/_posts/MongoDB的安装.md","hash":"b7cfdeadd563265eec9f225b60a226a826e7a696","modified":1505383842000},{"_id":"source/_posts/MongoDB的实战.md","hash":"e274e39d38edd722f46a10e45ebb5a9950abce78","modified":1505383842000},{"_id":"source/_posts/新Mac的装机过程.md","hash":"7291b67dffbe18a3f7eac542734d21bd926d7b1e","modified":1505491647000},{"_id":"source/_posts/hello-world.txt","hash":"565b0ee7a5ef8219c00603ae62ed2a2862d96c60","modified":1505383842000},{"_id":"source/_posts/初识Html5新特性.md","hash":"1d63d402771b0773e0061761b491b044952a946e","modified":1538215075000},{"_id":"source/_posts/基于Vue+iView+Koa+Mongodb的后台管理系统--客户端.md","hash":"31b8ebcd923a19c2cce1d2537a54618cd3e92a0b","modified":1505383842000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1505383843000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1505383843000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1505383843000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1505383843000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1505383843000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1505383843000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1505383843000},{"_id":"source/_posts/基于Vue+iView+Koa+Mongodb的后台管理系统--服务端.md","hash":"11e2a27206179fced0616bead138cd52b0859be7","modified":1505383842000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1505383843000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1505383843000},{"_id":"themes/yilia/layout/layout.ejs","hash":"18bc94a020c6e74b0a7a29bc412670605e0c0873","modified":1505383843000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505383843000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1505383843000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505383843000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505383843000},{"_id":"themes/yilia/source/main.css","hash":"cee78af2f34e5b8572aec058c8db4b6fdc88d6d5","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"e4937bc233b2e3525e1d887900a1fda7e039f686","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"fd631cb5297c367d0869446570f7cd89e403c638","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"8058daccb8915e72f2d6c3cbf00d2ed03801c0da","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"641234a5f9166bf231b3a86937ae42d864721108","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"d78993618051392103df1107c0da5abb81e2acac","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"b7fe090445660c4278562827dc7773fe23390018","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c5b92f83828e41a891c6db1d3e63cd2e007034e0","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1505383843000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505383843000},{"_id":"themes/yilia/source/fonts/iconfont.eot","hash":"bc7decf4e37c3df6bd81d617d951f83327faa742","modified":1505383843000},{"_id":"themes/yilia/source/fonts/iconfont.ttf","hash":"d1d9497f08d75c36af6b1a4e5ee7a82e912da18e","modified":1505383843000},{"_id":"themes/yilia/source/fonts/iconfont.woff","hash":"27523a9a8009e1599f6bb84e456d4b6506e62dd3","modified":1505383843000},{"_id":"themes/yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505383843000},{"_id":"themes/yilia/source/fonts/iconfont.svg","hash":"d40ad7496d4117d192594b5a9a622c88a60292a9","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"838d43529282b91a60934bbd39f3f9f5dbefee98","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1505383843000},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"34066227ffb6151d31fe8cadbef53738a91cfcc7","modified":1505383843000},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"f18e33e99b1032b95a60b018960bed64235c1a29","modified":1505383843000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"8ca48b006591bbf6d75688637c14fd1b5bdd650f","modified":1505383843000},{"_id":"themes/yilia/source-src/js/main.js","hash":"373c83477296dcbc41763d0f4e0cf4b32a290354","modified":1505383843000},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"37961302284435b2677b7fd1e0c0f7624e226e4a","modified":1505383843000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d79f5f2d789e6cddfd7b502df238107e9c63aac","modified":1505383843000},{"_id":"themes/yilia/source/main.js","hash":"9b65612638edd96ffed8d3e3819f7bae491be9ed","modified":1505383843000},{"_id":"themes/yilia/source-src/js/qrcode.js","hash":"97bc84e1d9cae958aba41c448a04f50c8920ce1e","modified":1505383843000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1505383843000},{"_id":"themes/yilia/source-src/js/share.js","hash":"2327a07e8441255cfcfe11720923a64a2bf9fbe2","modified":1505383843000},{"_id":"themes/yilia/source-src/js/tags.js","hash":"f259b3f808df3a8523a42978f922bb9eda76e0ee","modified":1505383843000},{"_id":"themes/yilia/source-src/js/tools.js","hash":"ed69771cd501770c2c303ae6ae695d2a9a187cdd","modified":1505383843000},{"_id":"themes/yilia/source-src/js/util.js","hash":"28c66c54cab81b2a6c8c393226f5bd30f369e1bb","modified":1505383843000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1505383843000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"f1c4c21f690024fcc13c088c431fa5fbba26cc91","modified":1505383843000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1505383843000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1505383843000},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"ca09562e666dd10e5e4b6b721a52ea0098eff6e1","modified":1505383843000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1505383843000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"08c3e3d27a341b1874d4a9b64be49721c2a5bc16","modified":1505383843000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1505383843000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"6e82eec485df32d6a32f602ca8728564193824e2","modified":1505383843000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1505383843000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"915f6ddc3cd4c736c572bf27eb3ef5455ce1b9b0","modified":1505383843000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1505383843000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"9ffd1bb579b67738c151a5ce88f16023de8204d2","modified":1505383843000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1505383843000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1505383843000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"4277e4b7e8fef5480d8e2b9574cbfdf59f0225c8","modified":1505383843000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"2a261fa2e402909a866c648a5de8eb287da6fba9","modified":1505383843000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"5700d3e08484f2828d5353b48a393e6f5dbdacb5","modified":1505383843000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"9fea828d17c937fdcdc14018032873de26d1f59d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"6e82e88caa483d9b17c4166a3dbdfbe84decba22","modified":1505383843000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1505383843000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1505383843000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"cf7583d7a3648ad36a909eed8a3e0c77d1be8f05","modified":1505383843000},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"795b0d1ad5ff278933409a1ab7451483fe6ceae5","modified":1505383843000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"62552c34d0c6acf303d1e9aede4612cc22a9e453","modified":1505383843000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1505383843000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1505383843000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"059b6799ee21e63d05162d7ed0e1935b6574f52a","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"81724d70d70a6ca6c6a03f649faf2b563231ec15","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"b03a166dc0b9a7e161816901409d4b2861be82ed","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1505383843000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1505383843000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1505383843000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"6f44ec8ff32515280c0b7ea8ad7e4cb5f4dfcd84","modified":1505383843000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1505383843000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"042b04e2b9e4de923dfae4649da054919a7ed370","modified":1505383843000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1505383843000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc7decf4e37c3df6bd81d617d951f83327faa742","modified":1505383843000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"d40ad7496d4117d192594b5a9a622c88a60292a9","modified":1505383843000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"27523a9a8009e1599f6bb84e456d4b6506e62dd3","modified":1505383843000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"d1d9497f08d75c36af6b1a4e5ee7a82e912da18e","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1505383843000},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1505383843000},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1505383843000},{"_id":"source/_posts/微信小程序和H5页面之间的通信.md","hash":"84d0813e8c50d761d2b035a3a4fb4d9246b21603","modified":1538216378000},{"_id":"public/tags/XSS/index.html","hash":"966ff6d235c84582f9def22e10e96ebf5b05965a","modified":1538216486617},{"_id":"public/tags/Node/index.html","hash":"37853b367b288d092fe3672df4341a47de834c3f","modified":1538216486641},{"_id":"public/tags/Express/index.html","hash":"617c358edfecb72a04523c8b65d0ebe4d95eb3c6","modified":1538216486642},{"_id":"public/tags/ejs/index.html","hash":"317cc18adbe50a2a1db12c2c060e51616d42ef54","modified":1538216486642},{"_id":"public/tags/web安全/index.html","hash":"0e33171d396c60d05d6dac73e732c47dda8110aa","modified":1538216486642},{"_id":"public/tags/MongoDB/index.html","hash":"3b4af06b7bb86d8fabecca5a19c1205b43c21366","modified":1538216486642},{"_id":"public/tags/Mac/index.html","hash":"13452460fb1b53446766cf59b998eaa37f6fbae0","modified":1538216486642},{"_id":"public/tags/html/index.html","hash":"bf302af66b3f47c362e6edc1524aa924a56171ef","modified":1538216486642},{"_id":"public/tags/html5/index.html","hash":"55633666a466ecb80a0829e85a64b06551bb0f88","modified":1538216486643},{"_id":"public/tags/Vue/index.html","hash":"91a9f813f9704a22c6d3baa11ea2304188da5461","modified":1538216486643},{"_id":"public/tags/iView/index.html","hash":"8d6d3b3aaf9bbfac7bd1510a8660a4fe0ffb00f5","modified":1538216486643},{"_id":"public/tags/Koa/index.html","hash":"176199ef45ce685f3be189c906bbf507194f0404","modified":1538216486643},{"_id":"public/tags/Mongodb/index.html","hash":"c2e46e8cbffb2b19f6f7932e40fbeac072cae441","modified":1538216486643},{"_id":"public/tags/vue-router/index.html","hash":"ebdbca58d999c94224e60b96a0e0232e5a3d81e6","modified":1538216486643},{"_id":"public/tags/koa-router/index.html","hash":"5fb78fd5fff65449ef5b56b00eb19957064873ed","modified":1538216486643},{"_id":"public/tags/vue-resource/index.html","hash":"a9b337e87981fdec41a35b8d7bb7258dfdfdfd9b","modified":1538216486643},{"_id":"public/archives/2017/04/index.html","hash":"579173b041db6fb20920f4eeab2ea82518b4c7fc","modified":1538216486643},{"_id":"public/archives/2017/05/index.html","hash":"d577f8da137d46598911aa781edd4e0c0c41b0d6","modified":1538216486643},{"_id":"public/archives/2017/06/index.html","hash":"02051fd3d904ae0af75f260e0e335587ef6d67b8","modified":1538216486643},{"_id":"public/archives/2017/09/index.html","hash":"c8f3984266297b1c0b68d3e2e09d162c3a5b89c7","modified":1538216486643},{"_id":"public/2017/09/15/新Mac的装机过程/index.html","hash":"c71ee7d69f89c9df7d30137d2117a27bfcc6714a","modified":1538216486643},{"_id":"public/2017/06/14/初识Html5新特性/index.html","hash":"30b5ea20f24c897d25c42949d2ba9aa97d0a8b9b","modified":1538216486644},{"_id":"public/2017/05/17/基于Vue+iView+Koa+Mongodb的后台管理系统--服务端/index.html","hash":"a9fc91f7ba68a02544a225e76393a5cf4121d396","modified":1538216486644},{"_id":"public/2017/05/16/基于Vue+iView+Koa+Mongodb的后台管理系统--客户端/index.html","hash":"32ec84029667905f01cd54d7643e58b5e2cbbab3","modified":1538216486644},{"_id":"public/2017/05/01/MongoDB的实战/index.html","hash":"7a5727d8dbba14b316b6a2560f24d55cbe04dfb9","modified":1538216486644},{"_id":"public/2017/04/27/XSS攻击学习笔记/index.html","hash":"6987a0ee553aef9c856750cdf62a9ea39e05baa2","modified":1538216486644},{"_id":"public/2017/04/24/MongoDB的增删改查/index.html","hash":"0c1729710f3b544633f7a0a2d24f32cec0d9c7ac","modified":1538216486644},{"_id":"public/2017/04/24/MongoDB的安装/index.html","hash":"3f31fdba42c5c1cd70f16d68e2e79b1c00312dc9","modified":1538216486644},{"_id":"public/index.html","hash":"059eef0d65b0eed1c42230c89bff6120936251e1","modified":1538216486644},{"_id":"public/archives/index.html","hash":"57f1571fac86e800692558ca536109d8fb4fa088","modified":1538216486644},{"_id":"public/archives/2017/index.html","hash":"ee6f7f9f6a1bb732b7b1383437514b2bcc26fa93","modified":1538216486644},{"_id":"public/tags/wxMiniprogram/index.html","hash":"749c1c74109c071c7c8cfd28e63030eab89defd5","modified":1538216486646},{"_id":"public/tags/h5/index.html","hash":"cdcde5bb362632d57ce9c944338618b9a6f5cbc0","modified":1538216486646},{"_id":"public/archives/2018/index.html","hash":"fe2c042063f2ce46144612d5fa2da4517fb60284","modified":1538216486646},{"_id":"public/archives/2018/09/index.html","hash":"befd172b7f702dd078807f863ffae15943422c3b","modified":1538216486646},{"_id":"public/2018/09/29/微信小程序和H5页面之间的通信/index.html","hash":"8052e01d32bd4c20f3991da2b389075032d55f12","modified":1538216486646}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"XSS攻击学习笔记","date":"2017-04-27T10:15:54.000Z","_content":"\n> 最近的一次面试题中，有问到XSSE和CSRF。表示当时只知道学名，是“攻击”的意思。。。后来在慕课网中看到一位老师的视频，觉得还不错，就动手跟着学习起来。整理的学习笔记如下。项目源码会在后面贴出，请叫我雷锋~~\n\n### XSS的攻击方式\n\n+ 反射型\n\n> 发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。\n\n+ 存储型\n\n> 存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。\n\n### XSS的防御\n\n<!-- more -->\n\n+ 编码：对传递的数据进行编码转义，该操作可以在后端或者前端处理\n\n```\n“\t---->   &quot; \n&\t---->   &amp;\n<\t---->   &lt;\n>\t---->   &gt;\n不间断的空格\t---->   &nbsp;\n```\n\n+ 过滤：移除掉数据中不合法的元素，标签，属性等\n\n> 移除用户上传到dom属性。如img的onerror属性，可以出发xss攻击。\n移除用户上传的style，iframe，script节点\n\n\n+ 校正\n\n(1)避免直接对html entity解码\n> 在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（<）和大于号（>），这是因为浏览器会误认为它们是标签。如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。HTML 中的常用字符实体是不间断空格(&nbsp;)。\n\n(2)使用dom parse转换，校正不匹配的标签\n> 对匹配到的标签，属性等进行过滤\n\n(3)示例代码\n```js\n// 解码\nHTMLParser(he.unescape(s,{strict:true}),{\n\tstart:function(tag,attrs,unary){\n        // 过滤不合法的标签\n        if(tag=='script'||tag=='style'||tag=='link'||tag=='iframe'||tag=='frame')return;\n        results += '<'+tag;\n        // 这里过滤掉全部的属性，实际中可根据需要有选择性的替换\n        // for(var i=0,len=attrs.length;i<len;i++){\n        //     results += \" \"+attrs[i].name+'=\"'+attrs[i].escaped+'\"';\n        // }\n        results += (unary?\"/\":\"\")+\">\";\n    },\n    end:function(tag){\n        results += \"</\"+tag+\">\";\n    },\n    chars:function(text){\n        results += text;\n    },\n    comment:function(text){\n        results +=\"<!--\"+text+\"-->\";\n    }\n});\n```\n### XSS项目实战\n\n[项目源码,叫我雷锋](https://github.com/liujinhuan/XSS.git)\n[Web安全-XSS](http://www.imooc.com/learn/812)\n\n\n\n\n\n\n","source":"_posts/XSS攻击学习笔记.md","raw":"---\ntitle: XSS攻击学习笔记\ndate: 2017-04-27 18:15:54\ntags: \n    - XSS\n    - Node\n    - Express\n    - ejs\n    - web安全\n---\n\n> 最近的一次面试题中，有问到XSSE和CSRF。表示当时只知道学名，是“攻击”的意思。。。后来在慕课网中看到一位老师的视频，觉得还不错，就动手跟着学习起来。整理的学习笔记如下。项目源码会在后面贴出，请叫我雷锋~~\n\n### XSS的攻击方式\n\n+ 反射型\n\n> 发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。\n\n+ 存储型\n\n> 存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。\n\n### XSS的防御\n\n<!-- more -->\n\n+ 编码：对传递的数据进行编码转义，该操作可以在后端或者前端处理\n\n```\n“\t---->   &quot; \n&\t---->   &amp;\n<\t---->   &lt;\n>\t---->   &gt;\n不间断的空格\t---->   &nbsp;\n```\n\n+ 过滤：移除掉数据中不合法的元素，标签，属性等\n\n> 移除用户上传到dom属性。如img的onerror属性，可以出发xss攻击。\n移除用户上传的style，iframe，script节点\n\n\n+ 校正\n\n(1)避免直接对html entity解码\n> 在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（<）和大于号（>），这是因为浏览器会误认为它们是标签。如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。HTML 中的常用字符实体是不间断空格(&nbsp;)。\n\n(2)使用dom parse转换，校正不匹配的标签\n> 对匹配到的标签，属性等进行过滤\n\n(3)示例代码\n```js\n// 解码\nHTMLParser(he.unescape(s,{strict:true}),{\n\tstart:function(tag,attrs,unary){\n        // 过滤不合法的标签\n        if(tag=='script'||tag=='style'||tag=='link'||tag=='iframe'||tag=='frame')return;\n        results += '<'+tag;\n        // 这里过滤掉全部的属性，实际中可根据需要有选择性的替换\n        // for(var i=0,len=attrs.length;i<len;i++){\n        //     results += \" \"+attrs[i].name+'=\"'+attrs[i].escaped+'\"';\n        // }\n        results += (unary?\"/\":\"\")+\">\";\n    },\n    end:function(tag){\n        results += \"</\"+tag+\">\";\n    },\n    chars:function(text){\n        results += text;\n    },\n    comment:function(text){\n        results +=\"<!--\"+text+\"-->\";\n    }\n});\n```\n### XSS项目实战\n\n[项目源码,叫我雷锋](https://github.com/liujinhuan/XSS.git)\n[Web安全-XSS](http://www.imooc.com/learn/812)\n\n\n\n\n\n\n","slug":"XSS攻击学习笔记","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zog700002l7oeyehhnmg","content":"<blockquote>\n<p>最近的一次面试题中，有问到XSSE和CSRF。表示当时只知道学名，是“攻击”的意思。。。后来在慕课网中看到一位老师的视频，觉得还不错，就动手跟着学习起来。整理的学习笔记如下。项目源码会在后面贴出，请叫我雷锋~~</p>\n</blockquote>\n<h3 id=\"XSS的攻击方式\"><a href=\"#XSS的攻击方式\" class=\"headerlink\" title=\"XSS的攻击方式\"></a>XSS的攻击方式</h3><ul>\n<li>反射型</li>\n</ul>\n<blockquote>\n<p>发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。</p>\n</blockquote>\n<ul>\n<li>存储型</li>\n</ul>\n<blockquote>\n<p>存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。</p>\n</blockquote>\n<h3 id=\"XSS的防御\"><a href=\"#XSS的防御\" class=\"headerlink\" title=\"XSS的防御\"></a>XSS的防御</h3><a id=\"more\"></a>\n<ul>\n<li>编码：对传递的数据进行编码转义，该操作可以在后端或者前端处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“\t----&gt;   &amp;quot; </span><br><span class=\"line\">&amp;\t----&gt;   &amp;amp;</span><br><span class=\"line\">&lt;\t----&gt;   &amp;lt;</span><br><span class=\"line\">&gt;\t----&gt;   &amp;gt;</span><br><span class=\"line\">不间断的空格\t----&gt;   &amp;nbsp;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>过滤：移除掉数据中不合法的元素，标签，属性等</li>\n</ul>\n<blockquote>\n<p>移除用户上传到dom属性。如img的onerror属性，可以出发xss攻击。<br>移除用户上传的style，iframe，script节点</p>\n</blockquote>\n<ul>\n<li>校正</li>\n</ul>\n<p>(1)避免直接对html entity解码</p>\n<blockquote>\n<p>在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。HTML 中的常用字符实体是不间断空格(&nbsp;)。</p>\n</blockquote>\n<p>(2)使用dom parse转换，校正不匹配的标签</p>\n<blockquote>\n<p>对匹配到的标签，属性等进行过滤</p>\n</blockquote>\n<p>(3)示例代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解码</span></span><br><span class=\"line\">HTMLParser(he.unescape(s,&#123;<span class=\"attr\">strict</span>:<span class=\"literal\">true</span>&#125;),&#123;</span><br><span class=\"line\">\tstart:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag,attrs,unary</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 过滤不合法的标签</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tag==<span class=\"string\">'script'</span>||tag==<span class=\"string\">'style'</span>||tag==<span class=\"string\">'link'</span>||tag==<span class=\"string\">'iframe'</span>||tag==<span class=\"string\">'frame'</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        results += <span class=\"string\">'&lt;'</span>+tag;</span><br><span class=\"line\">        <span class=\"comment\">// 这里过滤掉全部的属性，实际中可根据需要有选择性的替换</span></span><br><span class=\"line\">        <span class=\"comment\">// for(var i=0,len=attrs.length;i&lt;len;i++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     results += \" \"+attrs[i].name+'=\"'+attrs[i].escaped+'\"';</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        results += (unary?<span class=\"string\">\"/\"</span>:<span class=\"string\">\"\"</span>)+<span class=\"string\">\"&gt;\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    end:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>)</span>&#123;</span><br><span class=\"line\">        results += <span class=\"string\">\"&lt;/\"</span>+tag+<span class=\"string\">\"&gt;\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    chars:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        results += text;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comment:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        results +=<span class=\"string\">\"&lt;!--\"</span>+text+<span class=\"string\">\"--&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"XSS项目实战\"><a href=\"#XSS项目实战\" class=\"headerlink\" title=\"XSS项目实战\"></a>XSS项目实战</h3><p><a href=\"https://github.com/liujinhuan/XSS.git\" target=\"_blank\" rel=\"noopener\">项目源码,叫我雷锋</a><br><a href=\"http://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近的一次面试题中，有问到XSSE和CSRF。表示当时只知道学名，是“攻击”的意思。。。后来在慕课网中看到一位老师的视频，觉得还不错，就动手跟着学习起来。整理的学习笔记如下。项目源码会在后面贴出，请叫我雷锋~~</p>\n</blockquote>\n<h3 id=\"XSS的攻击方式\"><a href=\"#XSS的攻击方式\" class=\"headerlink\" title=\"XSS的攻击方式\"></a>XSS的攻击方式</h3><ul>\n<li>反射型</li>\n</ul>\n<blockquote>\n<p>发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。</p>\n</blockquote>\n<ul>\n<li>存储型</li>\n</ul>\n<blockquote>\n<p>存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。</p>\n</blockquote>\n<h3 id=\"XSS的防御\"><a href=\"#XSS的防御\" class=\"headerlink\" title=\"XSS的防御\"></a>XSS的防御</h3>","more":"<ul>\n<li>编码：对传递的数据进行编码转义，该操作可以在后端或者前端处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“\t----&gt;   &amp;quot; </span><br><span class=\"line\">&amp;\t----&gt;   &amp;amp;</span><br><span class=\"line\">&lt;\t----&gt;   &amp;lt;</span><br><span class=\"line\">&gt;\t----&gt;   &amp;gt;</span><br><span class=\"line\">不间断的空格\t----&gt;   &amp;nbsp;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>过滤：移除掉数据中不合法的元素，标签，属性等</li>\n</ul>\n<blockquote>\n<p>移除用户上传到dom属性。如img的onerror属性，可以出发xss攻击。<br>移除用户上传的style，iframe，script节点</p>\n</blockquote>\n<ul>\n<li>校正</li>\n</ul>\n<p>(1)避免直接对html entity解码</p>\n<blockquote>\n<p>在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。HTML 中的常用字符实体是不间断空格(&nbsp;)。</p>\n</blockquote>\n<p>(2)使用dom parse转换，校正不匹配的标签</p>\n<blockquote>\n<p>对匹配到的标签，属性等进行过滤</p>\n</blockquote>\n<p>(3)示例代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解码</span></span><br><span class=\"line\">HTMLParser(he.unescape(s,&#123;<span class=\"attr\">strict</span>:<span class=\"literal\">true</span>&#125;),&#123;</span><br><span class=\"line\">\tstart:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag,attrs,unary</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 过滤不合法的标签</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tag==<span class=\"string\">'script'</span>||tag==<span class=\"string\">'style'</span>||tag==<span class=\"string\">'link'</span>||tag==<span class=\"string\">'iframe'</span>||tag==<span class=\"string\">'frame'</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        results += <span class=\"string\">'&lt;'</span>+tag;</span><br><span class=\"line\">        <span class=\"comment\">// 这里过滤掉全部的属性，实际中可根据需要有选择性的替换</span></span><br><span class=\"line\">        <span class=\"comment\">// for(var i=0,len=attrs.length;i&lt;len;i++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     results += \" \"+attrs[i].name+'=\"'+attrs[i].escaped+'\"';</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        results += (unary?<span class=\"string\">\"/\"</span>:<span class=\"string\">\"\"</span>)+<span class=\"string\">\"&gt;\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    end:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>)</span>&#123;</span><br><span class=\"line\">        results += <span class=\"string\">\"&lt;/\"</span>+tag+<span class=\"string\">\"&gt;\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    chars:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        results += text;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comment:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        results +=<span class=\"string\">\"&lt;!--\"</span>+text+<span class=\"string\">\"--&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"XSS项目实战\"><a href=\"#XSS项目实战\" class=\"headerlink\" title=\"XSS项目实战\"></a>XSS项目实战</h3><p><a href=\"https://github.com/liujinhuan/XSS.git\" target=\"_blank\" rel=\"noopener\">项目源码,叫我雷锋</a><br><a href=\"http://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></p>"},{"title":"MongoDB的增删改查","date":"2017-04-24T09:15:17.000Z","_content":"> 好像最近没那多鸡汤~直接开始吧~\n\n### 连接\n+ 前面一节我们安装了ManogoDB，如果你成功安装了的话～那么，新开终端，输入下述指令进行连接。\n\n```js\nmongo\n```\n\n+ 出现下述所示，很好，你成功啦～可以以命令行的方式操作啦\n\n```js\nMongoDB shell version: 3.2.8\nconnecting to: test\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\nhttp://docs.mongodb.org/\nQuestions? Try the support group\nhttp://groups.google.com/group/mongodb-user\nServer has startup warnings:\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten]\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000\n>\n>\n>\n```\n\n<!-- more -->\n\n+ 如果你没有成功安装mongodb，你可能会出现如下的错误哦～\n\n```js\nMongoDB shell version: 3.2.8\nconnecting to: test\n2016-08-02T18:14:33.677+0800 W NETWORK  [thread1] Failed to connect to 127.0.0.1:27017, reason: errno:61 Connection refused\n2016-08-02T18:14:33.678+0800 E QUERY    [thread1] Error: couldn't connect to server 127.0.0.1:27017, connection attempt failed :\nconnect@src/mongo/shell/mongo.js:229:14\n@(connect):1:6\n\nexception: connect failed\n```\n\n+ 所以，失败的～参考上一节～在安装下～\n\n\n### 增删改查\n1.数据库\n+ 查询已有的数据库\n\n```js\nshow dbs\n```\n\n+ 初次安装的话，会出现如下所示的一种数据库\n\n```js\nlocal  0.000GB\n```\n\n+ 安装数据库\n\n```js\nuse 数据库名（如：test）\n```\n\n+ 有同名数据库就切换到已有的，没有的话就会创建新的\n\n```js\nswitched to db test\n```\n\n2.集合\n+ 创建集合\n\n```js\ndb.createCollection(\"集合名字：如（mycollection）\")\n```\n\n+ 结果\n\n```js\n{ \"ok\" : 1 }\n```\n\n+ 查看集合\n\n```js\nshow collections\n```\n\n+ 结果\n\n```js\nmycollection（创建的集合名字）\n```\n\n3.增：\n+ insert（以集合mycollection为例）\n\n```js\ndb.mycollection.insert({name:\"liuqiqi\"})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nInserted\" : 1 })\n```\n\n4.查：\n+ find（以集合mycollection为例）\n\n```js\ndb.mycollection.find().pretty()\n```\n\n+ 结果\n\n```js\n{ \"_id\" : ObjectId(\"57a0871725ae4f21a42b44e3\"), \"name\" : \"liuqiqi\" }\n```\n\n5.改：\n+ update（以集合mycollection为例）。修改name是liuqiqi的为TTTTTT\n\n```js\ndb.mycollection.update({'name':'liuqiqi'},{$set:{'name':'TTTTTT'}})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n```\n\n6.删：\n+ remove（以集合mycollection为例）\n\n```js\ndb.mycollection.remove({\"name\":\"liuqiqi\"})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nRemoved\" : 1 })\n```\n\n### 可视化操作工具\n\n+ 上述操作都是在终端中输入指令执行的～推荐一款可视化操作工具[Robomongo](https://robomongo.org/)～\n\n\n\n\n","source":"_posts/MongoDB的增删改查.md","raw":"---\ntitle: MongoDB的增删改查\ndate: 2017-04-24 17:15:17\ntags: \n\t- MongoDB\n\t- Mac\n---\n> 好像最近没那多鸡汤~直接开始吧~\n\n### 连接\n+ 前面一节我们安装了ManogoDB，如果你成功安装了的话～那么，新开终端，输入下述指令进行连接。\n\n```js\nmongo\n```\n\n+ 出现下述所示，很好，你成功啦～可以以命令行的方式操作啦\n\n```js\nMongoDB shell version: 3.2.8\nconnecting to: test\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\nhttp://docs.mongodb.org/\nQuestions? Try the support group\nhttp://groups.google.com/group/mongodb-user\nServer has startup warnings:\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten]\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000\n>\n>\n>\n```\n\n<!-- more -->\n\n+ 如果你没有成功安装mongodb，你可能会出现如下的错误哦～\n\n```js\nMongoDB shell version: 3.2.8\nconnecting to: test\n2016-08-02T18:14:33.677+0800 W NETWORK  [thread1] Failed to connect to 127.0.0.1:27017, reason: errno:61 Connection refused\n2016-08-02T18:14:33.678+0800 E QUERY    [thread1] Error: couldn't connect to server 127.0.0.1:27017, connection attempt failed :\nconnect@src/mongo/shell/mongo.js:229:14\n@(connect):1:6\n\nexception: connect failed\n```\n\n+ 所以，失败的～参考上一节～在安装下～\n\n\n### 增删改查\n1.数据库\n+ 查询已有的数据库\n\n```js\nshow dbs\n```\n\n+ 初次安装的话，会出现如下所示的一种数据库\n\n```js\nlocal  0.000GB\n```\n\n+ 安装数据库\n\n```js\nuse 数据库名（如：test）\n```\n\n+ 有同名数据库就切换到已有的，没有的话就会创建新的\n\n```js\nswitched to db test\n```\n\n2.集合\n+ 创建集合\n\n```js\ndb.createCollection(\"集合名字：如（mycollection）\")\n```\n\n+ 结果\n\n```js\n{ \"ok\" : 1 }\n```\n\n+ 查看集合\n\n```js\nshow collections\n```\n\n+ 结果\n\n```js\nmycollection（创建的集合名字）\n```\n\n3.增：\n+ insert（以集合mycollection为例）\n\n```js\ndb.mycollection.insert({name:\"liuqiqi\"})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nInserted\" : 1 })\n```\n\n4.查：\n+ find（以集合mycollection为例）\n\n```js\ndb.mycollection.find().pretty()\n```\n\n+ 结果\n\n```js\n{ \"_id\" : ObjectId(\"57a0871725ae4f21a42b44e3\"), \"name\" : \"liuqiqi\" }\n```\n\n5.改：\n+ update（以集合mycollection为例）。修改name是liuqiqi的为TTTTTT\n\n```js\ndb.mycollection.update({'name':'liuqiqi'},{$set:{'name':'TTTTTT'}})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n```\n\n6.删：\n+ remove（以集合mycollection为例）\n\n```js\ndb.mycollection.remove({\"name\":\"liuqiqi\"})\n```\n\n+ 结果\n\n```js\nWriteResult({ \"nRemoved\" : 1 })\n```\n\n### 可视化操作工具\n\n+ 上述操作都是在终端中输入指令执行的～推荐一款可视化操作工具[Robomongo](https://robomongo.org/)～\n\n\n\n\n","slug":"MongoDB的增删改查","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zogb00012l7orz28jca6","content":"<blockquote>\n<p>好像最近没那多鸡汤~直接开始吧~</p>\n</blockquote>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li>前面一节我们安装了ManogoDB，如果你成功安装了的话～那么，新开终端，输入下述指令进行连接。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>出现下述所示，很好，你成功啦～可以以命令行的方式操作啦</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: <span class=\"number\">3.2</span><span class=\"number\">.8</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br><span class=\"line\">For interactive help, type <span class=\"string\">\"help\"</span>.</span><br><span class=\"line\">For more comprehensive documentation, see</span><br><span class=\"line\">http:<span class=\"comment\">//docs.mongodb.org/</span></span><br><span class=\"line\">Questions? Try the support group</span><br><span class=\"line\">http:<span class=\"comment\">//groups.google.com/group/mongodb-user</span></span><br><span class=\"line\">Server has startup warnings:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number <span class=\"keyword\">of</span> files is <span class=\"number\">256</span>, should be at least <span class=\"number\">1000</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>如果你没有成功安装mongodb，你可能会出现如下的错误哦～</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: <span class=\"number\">3.2</span><span class=\"number\">.8</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">14</span>:<span class=\"number\">33.677</span>+<span class=\"number\">0800</span> W NETWORK  [thread1] Failed to connect to <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">27017</span>, <span class=\"attr\">reason</span>: errno:<span class=\"number\">61</span> Connection refused</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">14</span>:<span class=\"number\">33.678</span>+<span class=\"number\">0800</span> E QUERY    [thread1] <span class=\"built_in\">Error</span>: couldn<span class=\"string\">'t connect to server 127.0.0.1:27017, connection attempt failed :</span></span><br><span class=\"line\"><span class=\"string\">connect@src/mongo/shell/mongo.js:229:14</span></span><br><span class=\"line\"><span class=\"string\">@(connect):1:6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">exception: connect failed</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>所以，失败的～参考上一节～在安装下～</li>\n</ul>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>1.数据库</p>\n<ul>\n<li>查询已有的数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初次安装的话，会出现如下所示的一种数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local  <span class=\"number\">0.000</span>GB</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use 数据库名（如：test）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>有同名数据库就切换到已有的，没有的话就会创建新的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switched to db test</span><br></pre></td></tr></table></figure>\n<p>2.集合</p>\n<ul>\n<li>创建集合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(<span class=\"string\">\"集合名字：如（mycollection）\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">\"ok\"</span> : <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看集合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mycollection（创建的集合名字）</span><br></pre></td></tr></table></figure>\n<p>3.增：</p>\n<ul>\n<li>insert（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liuqiqi\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nInserted\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>4.查：</p>\n<ul>\n<li>find（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.find().pretty()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"57a0871725ae4f21a42b44e3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"liuqiqi\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>5.改：</p>\n<ul>\n<li>update（以集合mycollection为例）。修改name是liuqiqi的为TTTTTT</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'liuqiqi'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'TTTTTT'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nMatched\"</span> : <span class=\"number\">1</span>, <span class=\"string\">\"nUpserted\"</span> : <span class=\"number\">0</span>, <span class=\"string\">\"nModified\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>6.删：</p>\n<ul>\n<li>remove（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.remove(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"liuqiqi\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nRemoved\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化操作工具\"><a href=\"#可视化操作工具\" class=\"headerlink\" title=\"可视化操作工具\"></a>可视化操作工具</h3><ul>\n<li>上述操作都是在终端中输入指令执行的～推荐一款可视化操作工具<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robomongo</a>～</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>好像最近没那多鸡汤~直接开始吧~</p>\n</blockquote>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li>前面一节我们安装了ManogoDB，如果你成功安装了的话～那么，新开终端，输入下述指令进行连接。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>出现下述所示，很好，你成功啦～可以以命令行的方式操作啦</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: <span class=\"number\">3.2</span><span class=\"number\">.8</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br><span class=\"line\">For interactive help, type <span class=\"string\">\"help\"</span>.</span><br><span class=\"line\">For more comprehensive documentation, see</span><br><span class=\"line\">http:<span class=\"comment\">//docs.mongodb.org/</span></span><br><span class=\"line\">Questions? Try the support group</span><br><span class=\"line\">http:<span class=\"comment\">//groups.google.com/group/mongodb-user</span></span><br><span class=\"line\">Server has startup warnings:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number <span class=\"keyword\">of</span> files is <span class=\"number\">256</span>, should be at least <span class=\"number\">1000</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>如果你没有成功安装mongodb，你可能会出现如下的错误哦～</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: <span class=\"number\">3.2</span><span class=\"number\">.8</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">14</span>:<span class=\"number\">33.677</span>+<span class=\"number\">0800</span> W NETWORK  [thread1] Failed to connect to <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">27017</span>, <span class=\"attr\">reason</span>: errno:<span class=\"number\">61</span> Connection refused</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">14</span>:<span class=\"number\">33.678</span>+<span class=\"number\">0800</span> E QUERY    [thread1] <span class=\"built_in\">Error</span>: couldn<span class=\"string\">'t connect to server 127.0.0.1:27017, connection attempt failed :</span></span><br><span class=\"line\"><span class=\"string\">connect@src/mongo/shell/mongo.js:229:14</span></span><br><span class=\"line\"><span class=\"string\">@(connect):1:6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">exception: connect failed</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>所以，失败的～参考上一节～在安装下～</li>\n</ul>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>1.数据库</p>\n<ul>\n<li>查询已有的数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初次安装的话，会出现如下所示的一种数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local  <span class=\"number\">0.000</span>GB</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use 数据库名（如：test）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>有同名数据库就切换到已有的，没有的话就会创建新的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switched to db test</span><br></pre></td></tr></table></figure>\n<p>2.集合</p>\n<ul>\n<li>创建集合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(<span class=\"string\">\"集合名字：如（mycollection）\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">\"ok\"</span> : <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看集合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mycollection（创建的集合名字）</span><br></pre></td></tr></table></figure>\n<p>3.增：</p>\n<ul>\n<li>insert（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liuqiqi\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nInserted\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>4.查：</p>\n<ul>\n<li>find（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.find().pretty()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"57a0871725ae4f21a42b44e3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"liuqiqi\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>5.改：</p>\n<ul>\n<li>update（以集合mycollection为例）。修改name是liuqiqi的为TTTTTT</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'liuqiqi'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'TTTTTT'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nMatched\"</span> : <span class=\"number\">1</span>, <span class=\"string\">\"nUpserted\"</span> : <span class=\"number\">0</span>, <span class=\"string\">\"nModified\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>6.删：</p>\n<ul>\n<li>remove（以集合mycollection为例）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.mycollection.remove(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"liuqiqi\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteResult(&#123; <span class=\"string\">\"nRemoved\"</span> : <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化操作工具\"><a href=\"#可视化操作工具\" class=\"headerlink\" title=\"可视化操作工具\"></a>可视化操作工具</h3><ul>\n<li>上述操作都是在终端中输入指令执行的～推荐一款可视化操作工具<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robomongo</a>～</li>\n</ul>"},{"title":"MongoDB的安装","date":"2017-04-24T08:00:17.000Z","_content":"> 之前一直在其他平台发布着自己的博客，现在发现GithubPages这个东东~再加上绚丽的主题~~又可以好好的装逼了。那我们撸起袖子，开始干。\n\n### HomeBrew简介与安装\n+ 简介：就是mac上的软件包管理工具，方便安装与卸载。\n+ 安装：打开终端，输入如下命令，期间会输入一次回车＋两次开机密码。\n\n```js\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### MongoDB安装\n+ 打开终端，输入下述指令\n\n```js\nbrew update\n```\n\n+ 继续输入下面指令，期间会出现约两次进度条（忘记截图）\n\n```js\nbrew install mongodb\n```\n\n<!-- more -->\n\n+ 输入指令，启动Mongodb\n```js\nmongod\n```\n\n+ 出现如下报错：约是说没有`/data/db`目录的。\n\n```js\n2016-08-02T18:19:16.825+0800 I CONTROL  [initandlisten] MongoDB starting : pid=37113 port=27017 dbpath=/data/db 64-bit host=C02Q6N1GFVH5-3.local\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] db version v3.2.8\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] allocator: system\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] modules: none\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] build environment:\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] options: {}\n2016-08-02T18:19:16.828+0800 I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating\n2016-08-02T18:19:16.828+0800 I CONTROL  [initandlisten] dbexit:  rc: 100\n```\n\n+ 继续输入指令，创建`/data/db`，解决上述问题。期间会出入一次开机密码\n\n```js\nsudo chown -R 用户名 /data/db\n```\n\n+ 再次试着启动Mongodb\n\n```js\nmongod\n```\n+ waitting 27017。。。成功啦！！！\n\n```js\n2016-08-02T19:16:06.621+0800 I CONTROL  [initandlisten] MongoDB starting : pid=38338 port=27017 dbpath=/data/db 64-bit host=C02Q6N1GFVH5-3.local\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] db version v3.2.8\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] allocator: system\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] modules: none\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] build environment:\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] options: {}\n2016-08-02T19:16:06.622+0800 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=4G,session_max=20000,eviction=(threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten]\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000\n2016-08-02T19:16:07.239+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'\n2016-08-02T19:16:07.239+0800 I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker\n2016-08-02T19:16:07.390+0800 I NETWORK  [initandlisten] waiting for connections on port 27017\n```\n\n+ 此时打开浏览器，输入下述地址：\n\n```js\nhttp://127.0.0.1:27017/\n```\n+ 出现如下所示的页面也代表启动成功。\n\n```js\nIt looks like you are trying to access MongoDB over HTTP on the native driver port.\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/MongoDB的安装.md","raw":"---\ntitle: MongoDB的安装\ndate: 2017-04-24 16:00:17\ntags: \n\t- MongoDB\n\t- Mac\n---\n> 之前一直在其他平台发布着自己的博客，现在发现GithubPages这个东东~再加上绚丽的主题~~又可以好好的装逼了。那我们撸起袖子，开始干。\n\n### HomeBrew简介与安装\n+ 简介：就是mac上的软件包管理工具，方便安装与卸载。\n+ 安装：打开终端，输入如下命令，期间会输入一次回车＋两次开机密码。\n\n```js\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### MongoDB安装\n+ 打开终端，输入下述指令\n\n```js\nbrew update\n```\n\n+ 继续输入下面指令，期间会出现约两次进度条（忘记截图）\n\n```js\nbrew install mongodb\n```\n\n<!-- more -->\n\n+ 输入指令，启动Mongodb\n```js\nmongod\n```\n\n+ 出现如下报错：约是说没有`/data/db`目录的。\n\n```js\n2016-08-02T18:19:16.825+0800 I CONTROL  [initandlisten] MongoDB starting : pid=37113 port=27017 dbpath=/data/db 64-bit host=C02Q6N1GFVH5-3.local\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] db version v3.2.8\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] allocator: system\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] modules: none\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] build environment:\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-08-02T18:19:16.826+0800 I CONTROL  [initandlisten] options: {}\n2016-08-02T18:19:16.828+0800 I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating\n2016-08-02T18:19:16.828+0800 I CONTROL  [initandlisten] dbexit:  rc: 100\n```\n\n+ 继续输入指令，创建`/data/db`，解决上述问题。期间会出入一次开机密码\n\n```js\nsudo chown -R 用户名 /data/db\n```\n\n+ 再次试着启动Mongodb\n\n```js\nmongod\n```\n+ waitting 27017。。。成功啦！！！\n\n```js\n2016-08-02T19:16:06.621+0800 I CONTROL  [initandlisten] MongoDB starting : pid=38338 port=27017 dbpath=/data/db 64-bit host=C02Q6N1GFVH5-3.local\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] db version v3.2.8\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] allocator: system\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] modules: none\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] build environment:\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-08-02T19:16:06.622+0800 I CONTROL  [initandlisten] options: {}\n2016-08-02T19:16:06.622+0800 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=4G,session_max=20000,eviction=(threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten]\n2016-08-02T19:16:07.239+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000\n2016-08-02T19:16:07.239+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'\n2016-08-02T19:16:07.239+0800 I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker\n2016-08-02T19:16:07.390+0800 I NETWORK  [initandlisten] waiting for connections on port 27017\n```\n\n+ 此时打开浏览器，输入下述地址：\n\n```js\nhttp://127.0.0.1:27017/\n```\n+ 出现如下所示的页面也代表启动成功。\n\n```js\nIt looks like you are trying to access MongoDB over HTTP on the native driver port.\n```\n\n\n\n\n\n\n\n\n\n","slug":"MongoDB的安装","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zogf00032l7ool9yxptq","content":"<blockquote>\n<p>之前一直在其他平台发布着自己的博客，现在发现GithubPages这个东东~再加上绚丽的主题~~又可以好好的装逼了。那我们撸起袖子，开始干。</p>\n</blockquote>\n<h3 id=\"HomeBrew简介与安装\"><a href=\"#HomeBrew简介与安装\" class=\"headerlink\" title=\"HomeBrew简介与安装\"></a>HomeBrew简介与安装</h3><ul>\n<li>简介：就是mac上的软件包管理工具，方便安装与卸载。</li>\n<li>安装：打开终端，输入如下命令，期间会输入一次回车＋两次开机密码。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDB安装\"><a href=\"#MongoDB安装\" class=\"headerlink\" title=\"MongoDB安装\"></a>MongoDB安装</h3><ul>\n<li>打开终端，输入下述指令</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n<ul>\n<li>继续输入下面指令，期间会出现约两次进度条（忘记截图）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p>输入指令，启动Mongodb</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出现如下报错：约是说没有<code>/data/db</code>目录的。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.825</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=<span class=\"number\">37113</span> port=<span class=\"number\">27017</span> dbpath=<span class=\"regexp\">/data/</span>db <span class=\"number\">64</span>-bit host=C02Q6N1GFVH5<span class=\"number\">-3.</span>local</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] db version v3<span class=\"number\">.2</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL <span class=\"number\">1.0</span><span class=\"number\">.2</span>h  <span class=\"number\">3</span> May <span class=\"number\">2016</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.828</span>+<span class=\"number\">0800</span> I STORAGE  [initandlisten] exception <span class=\"keyword\">in</span> initAndListen: <span class=\"number\">29</span> Data directory /data/db not found., terminating</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.828</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] dbexit:  rc: <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>继续输入指令，创建<code>/data/db</code>，解决上述问题。期间会出入一次开机密码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 /data/db</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再次试着启动Mongodb</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n<ul>\n<li>waitting 27017。。。成功啦！！！</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.621</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=<span class=\"number\">38338</span> port=<span class=\"number\">27017</span> dbpath=<span class=\"regexp\">/data/</span>db <span class=\"number\">64</span>-bit host=C02Q6N1GFVH5<span class=\"number\">-3.</span>local</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] db version v3<span class=\"number\">.2</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL <span class=\"number\">1.0</span><span class=\"number\">.2</span>h  <span class=\"number\">3</span> May <span class=\"number\">2016</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=<span class=\"number\">4</span>G,session_max=<span class=\"number\">20000</span>,eviction=(threads_max=<span class=\"number\">4</span>),config_base=<span class=\"literal\">false</span>,statistics=(fast),log=(enabled=<span class=\"literal\">true</span>,archive=<span class=\"literal\">true</span>,path=journal,compressor=snappy),file_manager=(close_idle_time=<span class=\"number\">100000</span>),checkpoint=(wait=<span class=\"number\">60</span>,log_size=<span class=\"number\">2</span>GB),statistics_log=(wait=<span class=\"number\">0</span>),</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number <span class=\"keyword\">of</span> files is <span class=\"number\">256</span>, should be at least <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture <span class=\"keyword\">with</span> directory <span class=\"string\">'/data/db/diagnostic.data'</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.390</span>+<span class=\"number\">0800</span> I NETWORK  [initandlisten] waiting <span class=\"keyword\">for</span> connections on port <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>此时打开浏览器，输入下述地址：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1:27017/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>出现如下所示的页面也代表启动成功。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>之前一直在其他平台发布着自己的博客，现在发现GithubPages这个东东~再加上绚丽的主题~~又可以好好的装逼了。那我们撸起袖子，开始干。</p>\n</blockquote>\n<h3 id=\"HomeBrew简介与安装\"><a href=\"#HomeBrew简介与安装\" class=\"headerlink\" title=\"HomeBrew简介与安装\"></a>HomeBrew简介与安装</h3><ul>\n<li>简介：就是mac上的软件包管理工具，方便安装与卸载。</li>\n<li>安装：打开终端，输入如下命令，期间会输入一次回车＋两次开机密码。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDB安装\"><a href=\"#MongoDB安装\" class=\"headerlink\" title=\"MongoDB安装\"></a>MongoDB安装</h3><ul>\n<li>打开终端，输入下述指令</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n<ul>\n<li>继续输入下面指令，期间会出现约两次进度条（忘记截图）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><p>输入指令，启动Mongodb</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出现如下报错：约是说没有<code>/data/db</code>目录的。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.825</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=<span class=\"number\">37113</span> port=<span class=\"number\">27017</span> dbpath=<span class=\"regexp\">/data/</span>db <span class=\"number\">64</span>-bit host=C02Q6N1GFVH5<span class=\"number\">-3.</span>local</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] db version v3<span class=\"number\">.2</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL <span class=\"number\">1.0</span><span class=\"number\">.2</span>h  <span class=\"number\">3</span> May <span class=\"number\">2016</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.826</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.828</span>+<span class=\"number\">0800</span> I STORAGE  [initandlisten] exception <span class=\"keyword\">in</span> initAndListen: <span class=\"number\">29</span> Data directory /data/db not found., terminating</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T18:<span class=\"number\">19</span>:<span class=\"number\">16.828</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] dbexit:  rc: <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>继续输入指令，创建<code>/data/db</code>，解决上述问题。期间会出入一次开机密码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 /data/db</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再次试着启动Mongodb</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n<ul>\n<li>waitting 27017。。。成功啦！！！</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.621</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=<span class=\"number\">38338</span> port=<span class=\"number\">27017</span> dbpath=<span class=\"regexp\">/data/</span>db <span class=\"number\">64</span>-bit host=C02Q6N1GFVH5<span class=\"number\">-3.</span>local</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] db version v3<span class=\"number\">.2</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL <span class=\"number\">1.0</span><span class=\"number\">.2</span>h  <span class=\"number\">3</span> May <span class=\"number\">2016</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">06.622</span>+<span class=\"number\">0800</span> I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=<span class=\"number\">4</span>G,session_max=<span class=\"number\">20000</span>,eviction=(threads_max=<span class=\"number\">4</span>),config_base=<span class=\"literal\">false</span>,statistics=(fast),log=(enabled=<span class=\"literal\">true</span>,archive=<span class=\"literal\">true</span>,path=journal,compressor=snappy),file_manager=(close_idle_time=<span class=\"number\">100000</span>),checkpoint=(wait=<span class=\"number\">60</span>,log_size=<span class=\"number\">2</span>GB),statistics_log=(wait=<span class=\"number\">0</span>),</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten]</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number <span class=\"keyword\">of</span> files is <span class=\"number\">256</span>, should be at least <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture <span class=\"keyword\">with</span> directory <span class=\"string\">'/data/db/diagnostic.data'</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.239</span>+<span class=\"number\">0800</span> I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-02</span>T19:<span class=\"number\">16</span>:<span class=\"number\">07.390</span>+<span class=\"number\">0800</span> I NETWORK  [initandlisten] waiting <span class=\"keyword\">for</span> connections on port <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>此时打开浏览器，输入下述地址：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1:27017/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>出现如下所示的页面也代表启动成功。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure>"},{"title":"Node下MongoDB的实战","date":"2017-05-01T14:52:00.000Z","_content":"\n> 在听陈鸿宇的《理想三旬》。好听～\n\n上两篇博文中提到了在Mac下MongoDB的安装与连接，这次我们来看看如何在Node命令行的形式下，操MongoDB\nPS：本文中的数据集合采用上篇博文中“test”库中的“mycollection”。\n\n### 安装MongoDB包\n\n+ 使用Node中的mongodb模块，需要先安装哦～打开终端，输入如下命令～\n\n```js\nnpm install mongodb\n```\n\n### 数据库的链接与断开\n\n<!-- more -->\n\n+ 引入mongodb模块\n```js\nvar mongo = require(\"mongodb\");\n```\n\n+ 创建MongoDB数据库的服务器对象\n```js\nvar server = new mongo.Server(host,port,[options]);\n```\n> 说明：host：服务器所在地址，默认本地localhost；port：服务器端口号，默认27017；options：可选配置参数。\n\n+ 创建MongoDB的db对象\n```js\nvar db = new mongo.Db(databasename,server,[options]);\n```\n> 说明：databasename：数据库名，这里我们使用上篇的“test”数据库；server：服务器对象；options：可选配置参数。\n\n+ 执行db的open方法，连接数据库\n```js\ndb.open(callback(err,db));\n```\n> 说明：callback回调方法，如果连接失败，将抛出err错误，连接数据库成功，会返回db对象。\n\n+ 执行db的close方法，断开数据库连接\n```js\ndb.close();\n```\n> 说明：关闭数据库连接时，将会触发监听的close事件，该事件有err和db两参数，意义同上。\n\n```js\nfunction(err,db){\n    //回调方法\n}\n```\n+ 附：代码片段。将下述代码保存在testMongo.js文件中。\n\n```js\nvar mongo = require(\"mongodb\");\nvar host = \"localhost\";\nvar port = \"27017\";\n\nvar server = new mongo.Server(host,port,{auto_reconnect:true});\n\nvar db = new mongo.Db(\"test\",server,{safe:true});\n\ndb.open(function(err,db){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据库出错\");\n\t}else{\n\t\tconsole.log(\"成功建立数据库连接\");\n\t\tdb.close();\n\t}\n});\n\ndb.on(\"close\",function(err,db){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据库出错\");\n\t}else{\n\t\tconsole.log(\"关闭数据库连接\")\n\t}\n})\n```\n\n+ 新开终端，输入\"mongod\"打开mongodb。\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n关闭数据库连接\n```\n\n### 数据集合\n\n+ MongoDb操作的是数据集合！！！数据的操作就是对数据集合的操作。\n```js\ndb.collection(collectionname,[options],callback(err,collection));\n```\n> 说明：collectionname：数据库中数据集合名字，此处是上节的\"mycollection\"；options：可选配置参数。callback：连接的回调方法，会有连接出错的err参数和连接成功的collecction参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。\n```js\nconsole.log(\"成功建立数据库连接\");\n<!-- 数据集合 -->\ndb.collection('mycollection',function(err,collection){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据集合出错\");\n\t}else{\n\t\tconsole.log(\"成功连接数据集合\");\n\t\tdb.close();\n\t}\n});\n<!-- 数据集合 -->\n```\n\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n关闭数据库连接\n```\n\n### MongoDb－增\n+ 数据集合的insert方法，实现添加数据的操作。\n```\ncollection.insert(docs,[options],[callback(err,docs)])\n```\n\n> 说明：docs：要插入的数据；options：可选配置参数。可选callback：插入的回调方法，插入出错的err参数和插入成功时的docs（插入的数据）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－在test库的mycollection数据集合中插入5条Cailala\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- insert start-->\nfor(var i = 1;i<6;i++){\n\tcollection.insert({'name':'Cailala'+i},function(err,docs){\n\t\tconsole.log(docs);\n\t\tdb.close();\n\t});\n}\n<!-- insert end-->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala1', _id: 57a1fb5292764dbc5736dcd9 } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcd9 ] }\n关闭数据库连接\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala2', _id: 57a1fb5292764dbc5736dcda } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcda ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala3', _id: 57a1fb5292764dbc5736dcdb } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdb ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala4', _id: 57a1fb5292764dbc5736dcdc } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdc ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala5', _id: 57a1fb5292764dbc5736dcdd } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdd ] }\n```\n\n### MongoDb－查\n+ 数据集合的find方法，实现查询数据的操作。\n```js\ncollection.find(selector,[options]).toArray(callback(err,docs))\n```\n> 说明：selector：查询条件；options：可选配置参数。find方法返回的是Cursor游标对象，该对象的toArray方法将返回查询到的所有数据文档，参数callback：查询的回调方法，查询出错的err参数和查询成功时的docs（查询出的数据）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－查询数据集合中name是Cailala1的数据\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- find -->\ncollection.find({name:\"Cailala1\"},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\tif(err) throw err;\n\telse \n\t\tconsole.log(docs);\n\t\tdb.close();\n});\n<!-- find -->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n[ { name: 'Cailala1' } ]\n关闭数据库连接\n```\n\n### MongoDb－改\n+ 数据集合的update方法，实现修改数据的操作。\n```js\ncollection.update(selector,documents,[optios],[callback(err,resu)])\n```\n> 说明：selector：需要更新的数据文档；documents：用于更新的文档；options：可选配置参数；可选callback：修改的回调方法，修改出错的err参数和修改成功时的result（成功修改的数据条数）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－修改name是Cailala1为liujinhuan，并查询输出。\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- update -->\ncollection.update({name:\"Cailala1\"},{name:\"liujinhuan\"},function(err,res){\n\tif(err){\n\t\tthrow err;\n\t}else{\n\t\tconsole.log(\"成功更新 \"+JSON.parse(res).n+\"  条数据\");\n\t\tcollection.find({},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\t\t\t\tif(err) \n\t\t\t\t\tthrow err;\n\t\t\t\telse \n\t\t\t\t\tconsole.log(docs);\n\t\t\t\t\tdb.close();\n\t\t});\n\t}\n});\n<!-- update -->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n成功更新 1  条数据\n[ { name: 'liujinhuan' },\n  { name: 'Cailala2' },\n  { name: 'Cailala3' },\n  { name: 'Cailala4' },\n  { name: 'Cailala5' } ]\n关闭数据库连接\n```\n\n### MongoDb－删\n+ 数据集合的remove方法，实现删除数据的操作。\n```js\ncollection.remove([selector],[options],[callback])\n```\n\n> 说明：可选selector：删除的条件，不指定则删除全部；可选options：配置参数；可选callback：删除的回调方法，删除出错的err参数和删除成功时的result（成功修改的数据条数）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- remove -->\ncollection.remove({name:\"liujinhuan\"},function(err,res){\n\tif(err){\n\t\tthrow err;\n\t}else{\n\t\tconsole.log(\"成功删除 \"+JSON.parse(res).n+\"  条数据\");\n\t\tcollection.find({},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\t\t\t\tif(err) \n\t\t\t\t\tthrow err;\n\t\t\t\telse \n\t\t\t\t\tconsole.log(docs);\n\t\t\t\t\tdb.close();\n\t\t});\n\t}\n});\n<!-- remove -->\n```\n\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n成功删除 1  条数据\n[ { name: 'Cailala2' },\n  { name: 'Cailala3' },\n  { name: 'Cailala4' },\n  { name: 'Cailala5' } ]\n关闭数据库连接\n```\n\n> 以上就是命令行下的MongoDB操作。其中的options都是一些可以配置的参数～这里只是基础的用法啦～考虑搞一个前后端的小项目实战下~筹备中。怀挺~\n\n听不懂《理想三旬》。但还是在听～直到听吐为止吧～\n\n","source":"_posts/MongoDB的实战.md","raw":"---\ntitle: Node下MongoDB的实战\ndate: 2017-05-01 22:52\ntags: \n\t- MongoDB\n\t- Node\n\t- Mac\n---\n\n> 在听陈鸿宇的《理想三旬》。好听～\n\n上两篇博文中提到了在Mac下MongoDB的安装与连接，这次我们来看看如何在Node命令行的形式下，操MongoDB\nPS：本文中的数据集合采用上篇博文中“test”库中的“mycollection”。\n\n### 安装MongoDB包\n\n+ 使用Node中的mongodb模块，需要先安装哦～打开终端，输入如下命令～\n\n```js\nnpm install mongodb\n```\n\n### 数据库的链接与断开\n\n<!-- more -->\n\n+ 引入mongodb模块\n```js\nvar mongo = require(\"mongodb\");\n```\n\n+ 创建MongoDB数据库的服务器对象\n```js\nvar server = new mongo.Server(host,port,[options]);\n```\n> 说明：host：服务器所在地址，默认本地localhost；port：服务器端口号，默认27017；options：可选配置参数。\n\n+ 创建MongoDB的db对象\n```js\nvar db = new mongo.Db(databasename,server,[options]);\n```\n> 说明：databasename：数据库名，这里我们使用上篇的“test”数据库；server：服务器对象；options：可选配置参数。\n\n+ 执行db的open方法，连接数据库\n```js\ndb.open(callback(err,db));\n```\n> 说明：callback回调方法，如果连接失败，将抛出err错误，连接数据库成功，会返回db对象。\n\n+ 执行db的close方法，断开数据库连接\n```js\ndb.close();\n```\n> 说明：关闭数据库连接时，将会触发监听的close事件，该事件有err和db两参数，意义同上。\n\n```js\nfunction(err,db){\n    //回调方法\n}\n```\n+ 附：代码片段。将下述代码保存在testMongo.js文件中。\n\n```js\nvar mongo = require(\"mongodb\");\nvar host = \"localhost\";\nvar port = \"27017\";\n\nvar server = new mongo.Server(host,port,{auto_reconnect:true});\n\nvar db = new mongo.Db(\"test\",server,{safe:true});\n\ndb.open(function(err,db){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据库出错\");\n\t}else{\n\t\tconsole.log(\"成功建立数据库连接\");\n\t\tdb.close();\n\t}\n});\n\ndb.on(\"close\",function(err,db){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据库出错\");\n\t}else{\n\t\tconsole.log(\"关闭数据库连接\")\n\t}\n})\n```\n\n+ 新开终端，输入\"mongod\"打开mongodb。\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n关闭数据库连接\n```\n\n### 数据集合\n\n+ MongoDb操作的是数据集合！！！数据的操作就是对数据集合的操作。\n```js\ndb.collection(collectionname,[options],callback(err,collection));\n```\n> 说明：collectionname：数据库中数据集合名字，此处是上节的\"mycollection\"；options：可选配置参数。callback：连接的回调方法，会有连接出错的err参数和连接成功的collecction参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。\n```js\nconsole.log(\"成功建立数据库连接\");\n<!-- 数据集合 -->\ndb.collection('mycollection',function(err,collection){\n\tif(err){\n\t\tthrow err;\n\t\tconsole.log(\"连接数据集合出错\");\n\t}else{\n\t\tconsole.log(\"成功连接数据集合\");\n\t\tdb.close();\n\t}\n});\n<!-- 数据集合 -->\n```\n\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n关闭数据库连接\n```\n\n### MongoDb－增\n+ 数据集合的insert方法，实现添加数据的操作。\n```\ncollection.insert(docs,[options],[callback(err,docs)])\n```\n\n> 说明：docs：要插入的数据；options：可选配置参数。可选callback：插入的回调方法，插入出错的err参数和插入成功时的docs（插入的数据）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－在test库的mycollection数据集合中插入5条Cailala\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- insert start-->\nfor(var i = 1;i<6;i++){\n\tcollection.insert({'name':'Cailala'+i},function(err,docs){\n\t\tconsole.log(docs);\n\t\tdb.close();\n\t});\n}\n<!-- insert end-->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala1', _id: 57a1fb5292764dbc5736dcd9 } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcd9 ] }\n关闭数据库连接\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala2', _id: 57a1fb5292764dbc5736dcda } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcda ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala3', _id: 57a1fb5292764dbc5736dcdb } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdb ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala4', _id: 57a1fb5292764dbc5736dcdc } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdc ] }\n{ result: { ok: 1, n: 1 },\n  ops: [ { name: 'Cailala5', _id: 57a1fb5292764dbc5736dcdd } ],\n  insertedCount: 1,\n  insertedIds: [ 57a1fb5292764dbc5736dcdd ] }\n```\n\n### MongoDb－查\n+ 数据集合的find方法，实现查询数据的操作。\n```js\ncollection.find(selector,[options]).toArray(callback(err,docs))\n```\n> 说明：selector：查询条件；options：可选配置参数。find方法返回的是Cursor游标对象，该对象的toArray方法将返回查询到的所有数据文档，参数callback：查询的回调方法，查询出错的err参数和查询成功时的docs（查询出的数据）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－查询数据集合中name是Cailala1的数据\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- find -->\ncollection.find({name:\"Cailala1\"},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\tif(err) throw err;\n\telse \n\t\tconsole.log(docs);\n\t\tdb.close();\n});\n<!-- find -->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n[ { name: 'Cailala1' } ]\n关闭数据库连接\n```\n\n### MongoDb－改\n+ 数据集合的update方法，实现修改数据的操作。\n```js\ncollection.update(selector,documents,[optios],[callback(err,resu)])\n```\n> 说明：selector：需要更新的数据文档；documents：用于更新的文档；options：可选配置参数；可选callback：修改的回调方法，修改出错的err参数和修改成功时的result（成功修改的数据条数）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。－－修改name是Cailala1为liujinhuan，并查询输出。\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- update -->\ncollection.update({name:\"Cailala1\"},{name:\"liujinhuan\"},function(err,res){\n\tif(err){\n\t\tthrow err;\n\t}else{\n\t\tconsole.log(\"成功更新 \"+JSON.parse(res).n+\"  条数据\");\n\t\tcollection.find({},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\t\t\t\tif(err) \n\t\t\t\t\tthrow err;\n\t\t\t\telse \n\t\t\t\t\tconsole.log(docs);\n\t\t\t\t\tdb.close();\n\t\t});\n\t}\n});\n<!-- update -->\n```\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n成功更新 1  条数据\n[ { name: 'liujinhuan' },\n  { name: 'Cailala2' },\n  { name: 'Cailala3' },\n  { name: 'Cailala4' },\n  { name: 'Cailala5' } ]\n关闭数据库连接\n```\n\n### MongoDb－删\n+ 数据集合的remove方法，实现删除数据的操作。\n```js\ncollection.remove([selector],[options],[callback])\n```\n\n> 说明：可选selector：删除的条件，不指定则删除全部；可选options：配置参数；可选callback：删除的回调方法，删除出错的err参数和删除成功时的result（成功修改的数据条数）参数。\n\n+ 附：代码片段。保存下述文件到testMongo.js中相应位置。\n\n```js\nconsole.log(\"成功连接数据集合\");\n<!-- remove -->\ncollection.remove({name:\"liujinhuan\"},function(err,res){\n\tif(err){\n\t\tthrow err;\n\t}else{\n\t\tconsole.log(\"成功删除 \"+JSON.parse(res).n+\"  条数据\");\n\t\tcollection.find({},{fields:{name:1,_id:0}}).toArray(function(err,docs){\n\t\t\t\tif(err) \n\t\t\t\t\tthrow err;\n\t\t\t\telse \n\t\t\t\t\tconsole.log(docs);\n\t\t\t\t\tdb.close();\n\t\t});\n\t}\n});\n<!-- remove -->\n```\n\n+ 新开终端，输入\"node testMongo.js\"，看到如下结果，就成功啦。\n```js\ntestNode  node testMongo.js\n成功建立数据库连接\n成功连接数据集合\n成功删除 1  条数据\n[ { name: 'Cailala2' },\n  { name: 'Cailala3' },\n  { name: 'Cailala4' },\n  { name: 'Cailala5' } ]\n关闭数据库连接\n```\n\n> 以上就是命令行下的MongoDB操作。其中的options都是一些可以配置的参数～这里只是基础的用法啦～考虑搞一个前后端的小项目实战下~筹备中。怀挺~\n\n听不懂《理想三旬》。但还是在听～直到听吐为止吧～\n\n","slug":"MongoDB的实战","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zogg00042l7odj6pz5h0","content":"<blockquote>\n<p>在听陈鸿宇的《理想三旬》。好听～</p>\n</blockquote>\n<p>上两篇博文中提到了在Mac下MongoDB的安装与连接，这次我们来看看如何在Node命令行的形式下，操MongoDB<br>PS：本文中的数据集合采用上篇博文中“test”库中的“mycollection”。</p>\n<h3 id=\"安装MongoDB包\"><a href=\"#安装MongoDB包\" class=\"headerlink\" title=\"安装MongoDB包\"></a>安装MongoDB包</h3><ul>\n<li>使用Node中的mongodb模块，需要先安装哦～打开终端，输入如下命令～</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库的链接与断开\"><a href=\"#数据库的链接与断开\" class=\"headerlink\" title=\"数据库的链接与断开\"></a>数据库的链接与断开</h3><a id=\"more\"></a>\n<ul>\n<li><p>引入mongodb模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongo = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建MongoDB数据库的服务器对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongo.Server(host,port,[options]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：host：服务器所在地址，默认本地localhost；port：服务器端口号，默认27017；options：可选配置参数。</p>\n</blockquote>\n<ul>\n<li>创建MongoDB的db对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"keyword\">new</span> mongo.Db(databasename,server,[options]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：databasename：数据库名，这里我们使用上篇的“test”数据库；server：服务器对象；options：可选配置参数。</p>\n</blockquote>\n<ul>\n<li>执行db的open方法，连接数据库<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open(callback(err,db));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：callback回调方法，如果连接失败，将抛出err错误，连接数据库成功，会返回db对象。</p>\n</blockquote>\n<ul>\n<li>执行db的close方法，断开数据库连接<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：关闭数据库连接时，将会触发监听的close事件，该事件有err和db两参数，意义同上。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//回调方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>附：代码片段。将下述代码保存在testMongo.js文件中。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongo = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"string\">\"27017\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongo.Server(host,port,&#123;<span class=\"attr\">auto_reconnect</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"keyword\">new</span> mongo.Db(<span class=\"string\">\"test\"</span>,server,&#123;<span class=\"attr\">safe</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据库出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功建立数据库连接\"</span>);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(<span class=\"string\">\"close\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据库出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"关闭数据库连接\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”mongod”打开mongodb。</li>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数据集合\"><a href=\"#数据集合\" class=\"headerlink\" title=\"数据集合\"></a>数据集合</h3><ul>\n<li>MongoDb操作的是数据集合！！！数据的操作就是对数据集合的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection(collectionname,[options],callback(err,collection));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：collectionname：数据库中数据集合名字，此处是上节的”mycollection”；options：可选配置参数。callback：连接的回调方法，会有连接出错的err参数和连接成功的collecction参数。</p>\n</blockquote>\n<ul>\n<li><p>附：代码片段。保存下述文件到testMongo.js中相应位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功建立数据库连接\"</span>);</span><br><span class=\"line\">&lt;!-- 数据集合 --&gt;</span><br><span class=\"line\">db.collection(<span class=\"string\">'mycollection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,collection</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据集合出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- 数据集合 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDb－增\"><a href=\"#MongoDb－增\" class=\"headerlink\" title=\"MongoDb－增\"></a>MongoDb－增</h3><ul>\n<li>数据集合的insert方法，实现添加数据的操作。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.insert(docs,[options],[callback(err,docs)])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：docs：要插入的数据；options：可选配置参数。可选callback：插入的回调方法，插入出错的err参数和插入成功时的docs（插入的数据）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－在test库的mycollection数据集合中插入5条Cailala</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- insert start--&gt;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">\tcollection.insert(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Cailala'</span>+i&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- insert end--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala1'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcd9 &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcd9 ] &#125;</span><br><span class=\"line\">关闭数据库连接</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcda &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcda ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala3'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdb &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdb ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala4'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdc &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdc ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala5'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdd &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdd ] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDb－查\"><a href=\"#MongoDb－查\" class=\"headerlink\" title=\"MongoDb－查\"></a>MongoDb－查</h3><ul>\n<li>数据集合的find方法，实现查询数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.find(selector,[options]).toArray(callback(err,docs))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：selector：查询条件；options：可选配置参数。find方法返回的是Cursor游标对象，该对象的toArray方法将返回查询到的所有数据文档，参数callback：查询的回调方法，查询出错的err参数和查询成功时的docs（查询出的数据）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－查询数据集合中name是Cailala1的数据</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- find --&gt;</span><br><span class=\"line\">collection.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Cailala1\"</span>&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- find --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala1'</span> &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"MongoDb－改\"><a href=\"#MongoDb－改\" class=\"headerlink\" title=\"MongoDb－改\"></a>MongoDb－改</h3><ul>\n<li>数据集合的update方法，实现修改数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.update(selector,documents,[optios],[callback(err,resu)])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：selector：需要更新的数据文档；documents：用于更新的文档；options：可选配置参数；可选callback：修改的回调方法，修改出错的err参数和修改成功时的result（成功修改的数据条数）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－修改name是Cailala1为liujinhuan，并查询输出。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- update --&gt;</span><br><span class=\"line\">collection.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Cailala1\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liujinhuan\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功更新 \"</span>+<span class=\"built_in\">JSON</span>.parse(res).n+<span class=\"string\">\"  条数据\"</span>);</span><br><span class=\"line\">\t\tcollection.find(&#123;&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\t\t\t\tdb.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- update --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">成功更新 1  条数据</span><br><span class=\"line\">[ &#123; name: &apos;liujinhuan&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala2&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala3&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala4&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala5&apos; &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"MongoDb－删\"><a href=\"#MongoDb－删\" class=\"headerlink\" title=\"MongoDb－删\"></a>MongoDb－删</h3><ul>\n<li>数据集合的remove方法，实现删除数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.remove([selector],[options],[callback])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：可选selector：删除的条件，不指定则删除全部；可选options：配置参数；可选callback：删除的回调方法，删除出错的err参数和删除成功时的result（成功修改的数据条数）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- remove --&gt;</span><br><span class=\"line\">collection.remove(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liujinhuan\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功删除 \"</span>+<span class=\"built_in\">JSON</span>.parse(res).n+<span class=\"string\">\"  条数据\"</span>);</span><br><span class=\"line\">\t\tcollection.find(&#123;&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\t\t\t\tdb.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- remove --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">成功删除 <span class=\"number\">1</span>  条数据</span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala3'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala5'</span> &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>以上就是命令行下的MongoDB操作。其中的options都是一些可以配置的参数～这里只是基础的用法啦～考虑搞一个前后端的小项目实战下~筹备中。怀挺~</p>\n</blockquote>\n<p>听不懂《理想三旬》。但还是在听～直到听吐为止吧～</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在听陈鸿宇的《理想三旬》。好听～</p>\n</blockquote>\n<p>上两篇博文中提到了在Mac下MongoDB的安装与连接，这次我们来看看如何在Node命令行的形式下，操MongoDB<br>PS：本文中的数据集合采用上篇博文中“test”库中的“mycollection”。</p>\n<h3 id=\"安装MongoDB包\"><a href=\"#安装MongoDB包\" class=\"headerlink\" title=\"安装MongoDB包\"></a>安装MongoDB包</h3><ul>\n<li>使用Node中的mongodb模块，需要先安装哦～打开终端，输入如下命令～</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库的链接与断开\"><a href=\"#数据库的链接与断开\" class=\"headerlink\" title=\"数据库的链接与断开\"></a>数据库的链接与断开</h3>","more":"<ul>\n<li><p>引入mongodb模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongo = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建MongoDB数据库的服务器对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongo.Server(host,port,[options]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：host：服务器所在地址，默认本地localhost；port：服务器端口号，默认27017；options：可选配置参数。</p>\n</blockquote>\n<ul>\n<li>创建MongoDB的db对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"keyword\">new</span> mongo.Db(databasename,server,[options]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：databasename：数据库名，这里我们使用上篇的“test”数据库；server：服务器对象；options：可选配置参数。</p>\n</blockquote>\n<ul>\n<li>执行db的open方法，连接数据库<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open(callback(err,db));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：callback回调方法，如果连接失败，将抛出err错误，连接数据库成功，会返回db对象。</p>\n</blockquote>\n<ul>\n<li>执行db的close方法，断开数据库连接<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：关闭数据库连接时，将会触发监听的close事件，该事件有err和db两参数，意义同上。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//回调方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>附：代码片段。将下述代码保存在testMongo.js文件中。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongo = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"string\">\"27017\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongo.Server(host,port,&#123;<span class=\"attr\">auto_reconnect</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"keyword\">new</span> mongo.Db(<span class=\"string\">\"test\"</span>,server,&#123;<span class=\"attr\">safe</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据库出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功建立数据库连接\"</span>);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(<span class=\"string\">\"close\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据库出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"关闭数据库连接\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”mongod”打开mongodb。</li>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数据集合\"><a href=\"#数据集合\" class=\"headerlink\" title=\"数据集合\"></a>数据集合</h3><ul>\n<li>MongoDb操作的是数据集合！！！数据的操作就是对数据集合的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection(collectionname,[options],callback(err,collection));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：collectionname：数据库中数据集合名字，此处是上节的”mycollection”；options：可选配置参数。callback：连接的回调方法，会有连接出错的err参数和连接成功的collecction参数。</p>\n</blockquote>\n<ul>\n<li><p>附：代码片段。保存下述文件到testMongo.js中相应位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功建立数据库连接\"</span>);</span><br><span class=\"line\">&lt;!-- 数据集合 --&gt;</span><br><span class=\"line\">db.collection(<span class=\"string\">'mycollection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,collection</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接数据集合出错\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- 数据集合 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDb－增\"><a href=\"#MongoDb－增\" class=\"headerlink\" title=\"MongoDb－增\"></a>MongoDb－增</h3><ul>\n<li>数据集合的insert方法，实现添加数据的操作。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.insert(docs,[options],[callback(err,docs)])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：docs：要插入的数据；options：可选配置参数。可选callback：插入的回调方法，插入出错的err参数和插入成功时的docs（插入的数据）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－在test库的mycollection数据集合中插入5条Cailala</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- insert start--&gt;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">\tcollection.insert(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Cailala'</span>+i&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- insert end--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala1'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcd9 &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcd9 ] &#125;</span><br><span class=\"line\">关闭数据库连接</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcda &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcda ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala3'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdb &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdb ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala4'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdc &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdc ] &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">result</span>: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  ops: [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala5'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">57</span>a1fb5292764dbc5736dcdd &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertedIds: [ <span class=\"number\">57</span>a1fb5292764dbc5736dcdd ] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDb－查\"><a href=\"#MongoDb－查\" class=\"headerlink\" title=\"MongoDb－查\"></a>MongoDb－查</h3><ul>\n<li>数据集合的find方法，实现查询数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.find(selector,[options]).toArray(callback(err,docs))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：selector：查询条件；options：可选配置参数。find方法返回的是Cursor游标对象，该对象的toArray方法将返回查询到的所有数据文档，参数callback：查询的回调方法，查询出错的err参数和查询成功时的docs（查询出的数据）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－查询数据集合中name是Cailala1的数据</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- find --&gt;</span><br><span class=\"line\">collection.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Cailala1\"</span>&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\tdb.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- find --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala1'</span> &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"MongoDb－改\"><a href=\"#MongoDb－改\" class=\"headerlink\" title=\"MongoDb－改\"></a>MongoDb－改</h3><ul>\n<li>数据集合的update方法，实现修改数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.update(selector,documents,[optios],[callback(err,resu)])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：selector：需要更新的数据文档；documents：用于更新的文档；options：可选配置参数；可选callback：修改的回调方法，修改出错的err参数和修改成功时的result（成功修改的数据条数）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。－－修改name是Cailala1为liujinhuan，并查询输出。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- update --&gt;</span><br><span class=\"line\">collection.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Cailala1\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liujinhuan\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功更新 \"</span>+<span class=\"built_in\">JSON</span>.parse(res).n+<span class=\"string\">\"  条数据\"</span>);</span><br><span class=\"line\">\t\tcollection.find(&#123;&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\t\t\t\tdb.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- update --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">成功更新 1  条数据</span><br><span class=\"line\">[ &#123; name: &apos;liujinhuan&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala2&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala3&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala4&apos; &#125;,</span><br><span class=\"line\">  &#123; name: &apos;Cailala5&apos; &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"MongoDb－删\"><a href=\"#MongoDb－删\" class=\"headerlink\" title=\"MongoDb－删\"></a>MongoDb－删</h3><ul>\n<li>数据集合的remove方法，实现删除数据的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection.remove([selector],[options],[callback])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>说明：可选selector：删除的条件，不指定则删除全部；可选options：配置参数；可选callback：删除的回调方法，删除出错的err参数和删除成功时的result（成功修改的数据条数）参数。</p>\n</blockquote>\n<ul>\n<li>附：代码片段。保存下述文件到testMongo.js中相应位置。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功连接数据集合\"</span>);</span><br><span class=\"line\">&lt;!-- remove --&gt;</span><br><span class=\"line\">collection.remove(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"liujinhuan\"</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功删除 \"</span>+<span class=\"built_in\">JSON</span>.parse(res).n+<span class=\"string\">\"  条数据\"</span>);</span><br><span class=\"line\">\t\tcollection.find(&#123;&#125;,&#123;<span class=\"attr\">fields</span>:&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">\t\t\t\t\tdb.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;!-- remove --&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新开终端，输入”node testMongo.js”，看到如下结果，就成功啦。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testNode  node testMongo.js</span><br><span class=\"line\">成功建立数据库连接</span><br><span class=\"line\">成功连接数据集合</span><br><span class=\"line\">成功删除 <span class=\"number\">1</span>  条数据</span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala3'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Cailala5'</span> &#125; ]</span><br><span class=\"line\">关闭数据库连接</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>以上就是命令行下的MongoDB操作。其中的options都是一些可以配置的参数～这里只是基础的用法啦～考虑搞一个前后端的小项目实战下~筹备中。怀挺~</p>\n</blockquote>\n<p>听不懂《理想三旬》。但还是在听～直到听吐为止吧～</p>"},{"title":"新Mac的装机过程","date":"2017-09-15T14:47:12.000Z","_content":"> 2017年9月11日新入职一家公司。15寸+最高配带TouchBar的Pro已经分配到了我这里。装机的过程是痛苦的，因为打开电脑后，啥也没有。那就来个记录，免得以后遗忘。\n\n### Chrome(前端开发🐶的缘故，钟爱Chrome)\n\n+ Safiri搜索Chrome，选择Mac下载。\n![ChromeInstall](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/chrome-install.png)\n\n### 微信+QQ+QQ音乐\n\n<!-- more  -->\n\n+ AppStore登录账号，搜索安装即可\n\n### Office 破解版\n\n+ 从同事那里获得一个`pkg`和`破解补丁.dmg`。[点击下载](http://www.baidu.com)。安装时先安装pkg，安装完成后，先不要点击各个office，紧接着安装破解补丁.dmg，安装后在登录，就是可以跳过登录的破解版了。\n\n### SourceTree 破解版\n\n+ [还未上传百度网盘连接](http://www.baidu.com)\n\n### SublimeText\n\n+ Safiri搜索Chrome，选择Mac下载。\n![SublimeInstall](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/sublime-install.png)\n\n+ 安装后，需要设置字体。打开sublime，依次点击菜单栏`SublimeText->Preferences->seeting-user`，输入以下配置，保存：\n\n```js\n{\n  \"font_face\": \"Courier New\",\n  \"font_size\": 17\n}\n```\n\n### ShadowsocksX-2.6.3\n\n+ [百度下载](https://zh.osdn.net/projects/sfnet_shadowsocksgui/downloads/dist/ShadowsocksX-2.6.3.dmg/).\n\n\n### Node\n\n+ [官网下载](https://nodejs.org/en/download/)。安装过程中，记得选中`Make sure that /usr/local/bin is in your $PATH.\n+ Node安装后，是再带npm包管理器的。需要设置淘宝镜像\n\n```\n设置淘宝镜像：npm config set registry https://registry.npm.taobao.org\n\n设置为原镜像：npm config set registry http://registry.npmjs.org  \n```\n\n### Git+xCode\n\n+ AppStore登录账号，搜索安装xCode即可.Git为xCode自带。安装之后命令行查看git版本即可。\n```\n➜  ~ git version\ngit version 2.11.0 (Apple Git-81)\n```\n\n### iTerm2+zsh\n\n+ [官网下载iTerm2](http://www.iterm2.com/).按照步骤安装即可。\n+ 打开iTerm2，依次点击`iterm2->Perfernce->Profile`，左下角新建`Profile`并命名如：myzsh。\n+ 任意目录新建文件`Monokai-Soda.itermcolors`,[点击见详细内容](https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc)\n+ 步骤2中的新Profile-myzsh，右侧点击color，右下角点击`color presets`，选择`import`刚刚步骤3中创建的文件。记得：左侧点击`save defaults`\n\n![字体设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-1.png)\n![字号设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-2.png)\n![窗口及透明度设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-3.png)\n\n+ 关闭窗口，重启iTerm2。新建tab，输入如下地址，并输入开机密码，完成安装zsh。\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n![zsh安装](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-install.png)\n\n+ 关闭窗口，重启iTerm2。发现上方已经变成zsh。\n![zsh展示](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-show.png)\n\n\n","source":"_posts/新Mac的装机过程.md","raw":"---\ntitle: 新Mac的装机过程\ndate: 2017-9-15 22:47:12\ntags: \n\t- Mac\n---\n> 2017年9月11日新入职一家公司。15寸+最高配带TouchBar的Pro已经分配到了我这里。装机的过程是痛苦的，因为打开电脑后，啥也没有。那就来个记录，免得以后遗忘。\n\n### Chrome(前端开发🐶的缘故，钟爱Chrome)\n\n+ Safiri搜索Chrome，选择Mac下载。\n![ChromeInstall](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/chrome-install.png)\n\n### 微信+QQ+QQ音乐\n\n<!-- more  -->\n\n+ AppStore登录账号，搜索安装即可\n\n### Office 破解版\n\n+ 从同事那里获得一个`pkg`和`破解补丁.dmg`。[点击下载](http://www.baidu.com)。安装时先安装pkg，安装完成后，先不要点击各个office，紧接着安装破解补丁.dmg，安装后在登录，就是可以跳过登录的破解版了。\n\n### SourceTree 破解版\n\n+ [还未上传百度网盘连接](http://www.baidu.com)\n\n### SublimeText\n\n+ Safiri搜索Chrome，选择Mac下载。\n![SublimeInstall](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/sublime-install.png)\n\n+ 安装后，需要设置字体。打开sublime，依次点击菜单栏`SublimeText->Preferences->seeting-user`，输入以下配置，保存：\n\n```js\n{\n  \"font_face\": \"Courier New\",\n  \"font_size\": 17\n}\n```\n\n### ShadowsocksX-2.6.3\n\n+ [百度下载](https://zh.osdn.net/projects/sfnet_shadowsocksgui/downloads/dist/ShadowsocksX-2.6.3.dmg/).\n\n\n### Node\n\n+ [官网下载](https://nodejs.org/en/download/)。安装过程中，记得选中`Make sure that /usr/local/bin is in your $PATH.\n+ Node安装后，是再带npm包管理器的。需要设置淘宝镜像\n\n```\n设置淘宝镜像：npm config set registry https://registry.npm.taobao.org\n\n设置为原镜像：npm config set registry http://registry.npmjs.org  \n```\n\n### Git+xCode\n\n+ AppStore登录账号，搜索安装xCode即可.Git为xCode自带。安装之后命令行查看git版本即可。\n```\n➜  ~ git version\ngit version 2.11.0 (Apple Git-81)\n```\n\n### iTerm2+zsh\n\n+ [官网下载iTerm2](http://www.iterm2.com/).按照步骤安装即可。\n+ 打开iTerm2，依次点击`iterm2->Perfernce->Profile`，左下角新建`Profile`并命名如：myzsh。\n+ 任意目录新建文件`Monokai-Soda.itermcolors`,[点击见详细内容](https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc)\n+ 步骤2中的新Profile-myzsh，右侧点击color，右下角点击`color presets`，选择`import`刚刚步骤3中创建的文件。记得：左侧点击`save defaults`\n\n![字体设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-1.png)\n![字号设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-2.png)\n![窗口及透明度设置](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-3.png)\n\n+ 关闭窗口，重启iTerm2。新建tab，输入如下地址，并输入开机密码，完成安装zsh。\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n![zsh安装](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-install.png)\n\n+ 关闭窗口，重启iTerm2。发现上方已经变成zsh。\n![zsh展示](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-show.png)\n\n\n","slug":"新Mac的装机过程","published":1,"updated":"2017-09-15T16:07:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zogh00052l7oqi09eycn","content":"<blockquote>\n<p>2017年9月11日新入职一家公司。15寸+最高配带TouchBar的Pro已经分配到了我这里。装机的过程是痛苦的，因为打开电脑后，啥也没有。那就来个记录，免得以后遗忘。</p>\n</blockquote>\n<h3 id=\"Chrome-前端开发🐶的缘故，钟爱Chrome\"><a href=\"#Chrome-前端开发🐶的缘故，钟爱Chrome\" class=\"headerlink\" title=\"Chrome(前端开发🐶的缘故，钟爱Chrome)\"></a>Chrome(前端开发🐶的缘故，钟爱Chrome)</h3><ul>\n<li>Safiri搜索Chrome，选择Mac下载。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/chrome-install.png\" alt=\"ChromeInstall\"></li>\n</ul>\n<h3 id=\"微信-QQ-QQ音乐\"><a href=\"#微信-QQ-QQ音乐\" class=\"headerlink\" title=\"微信+QQ+QQ音乐\"></a>微信+QQ+QQ音乐</h3><a id=\"more\"></a>\n<ul>\n<li>AppStore登录账号，搜索安装即可</li>\n</ul>\n<h3 id=\"Office-破解版\"><a href=\"#Office-破解版\" class=\"headerlink\" title=\"Office 破解版\"></a>Office 破解版</h3><ul>\n<li>从同事那里获得一个<code>pkg</code>和<code>破解补丁.dmg</code>。<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">点击下载</a>。安装时先安装pkg，安装完成后，先不要点击各个office，紧接着安装破解补丁.dmg，安装后在登录，就是可以跳过登录的破解版了。</li>\n</ul>\n<h3 id=\"SourceTree-破解版\"><a href=\"#SourceTree-破解版\" class=\"headerlink\" title=\"SourceTree 破解版\"></a>SourceTree 破解版</h3><ul>\n<li><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">还未上传百度网盘连接</a></li>\n</ul>\n<h3 id=\"SublimeText\"><a href=\"#SublimeText\" class=\"headerlink\" title=\"SublimeText\"></a>SublimeText</h3><ul>\n<li><p>Safiri搜索Chrome，选择Mac下载。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/sublime-install.png\" alt=\"SublimeInstall\"></p>\n</li>\n<li><p>安装后，需要设置字体。打开sublime，依次点击菜单栏<code>SublimeText-&gt;Preferences-&gt;seeting-user</code>，输入以下配置，保存：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"font_face\"</span>: <span class=\"string\">\"Courier New\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"font_size\"</span>: <span class=\"number\">17</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ShadowsocksX-2-6-3\"><a href=\"#ShadowsocksX-2-6-3\" class=\"headerlink\" title=\"ShadowsocksX-2.6.3\"></a>ShadowsocksX-2.6.3</h3><ul>\n<li><a href=\"https://zh.osdn.net/projects/sfnet_shadowsocksgui/downloads/dist/ShadowsocksX-2.6.3.dmg/\" target=\"_blank\" rel=\"noopener\">百度下载</a>.</li>\n</ul>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ul>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>。安装过程中，记得选中`Make sure that /usr/local/bin is in your $PATH.</li>\n<li>Node安装后，是再带npm包管理器的。需要设置淘宝镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置淘宝镜像：npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">设置为原镜像：npm config set registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git-xCode\"><a href=\"#Git-xCode\" class=\"headerlink\" title=\"Git+xCode\"></a>Git+xCode</h3><ul>\n<li>AppStore登录账号，搜索安装xCode即可.Git为xCode自带。安装之后命令行查看git版本即可。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ git version</span><br><span class=\"line\">git version 2.11.0 (Apple Git-81)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"iTerm2-zsh\"><a href=\"#iTerm2-zsh\" class=\"headerlink\" title=\"iTerm2+zsh\"></a>iTerm2+zsh</h3><ul>\n<li><a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">官网下载iTerm2</a>.按照步骤安装即可。</li>\n<li>打开iTerm2，依次点击<code>iterm2-&gt;Perfernce-&gt;Profile</code>，左下角新建<code>Profile</code>并命名如：myzsh。</li>\n<li>任意目录新建文件<code>Monokai-Soda.itermcolors</code>,<a href=\"https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc\" target=\"_blank\" rel=\"noopener\">点击见详细内容</a></li>\n<li>步骤2中的新Profile-myzsh，右侧点击color，右下角点击<code>color presets</code>，选择<code>import</code>刚刚步骤3中创建的文件。记得：左侧点击<code>save defaults</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-1.png\" alt=\"字体设置\"><br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-2.png\" alt=\"字号设置\"><br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-3.png\" alt=\"窗口及透明度设置\"></p>\n<ul>\n<li>关闭窗口，重启iTerm2。新建tab，输入如下地址，并输入开机密码，完成安装zsh。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-install.png\" alt=\"zsh安装\"></p>\n<ul>\n<li>关闭窗口，重启iTerm2。发现上方已经变成zsh。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-show.png\" alt=\"zsh展示\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>2017年9月11日新入职一家公司。15寸+最高配带TouchBar的Pro已经分配到了我这里。装机的过程是痛苦的，因为打开电脑后，啥也没有。那就来个记录，免得以后遗忘。</p>\n</blockquote>\n<h3 id=\"Chrome-前端开发🐶的缘故，钟爱Chrome\"><a href=\"#Chrome-前端开发🐶的缘故，钟爱Chrome\" class=\"headerlink\" title=\"Chrome(前端开发🐶的缘故，钟爱Chrome)\"></a>Chrome(前端开发🐶的缘故，钟爱Chrome)</h3><ul>\n<li>Safiri搜索Chrome，选择Mac下载。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/chrome-install.png\" alt=\"ChromeInstall\"></li>\n</ul>\n<h3 id=\"微信-QQ-QQ音乐\"><a href=\"#微信-QQ-QQ音乐\" class=\"headerlink\" title=\"微信+QQ+QQ音乐\"></a>微信+QQ+QQ音乐</h3>","more":"<ul>\n<li>AppStore登录账号，搜索安装即可</li>\n</ul>\n<h3 id=\"Office-破解版\"><a href=\"#Office-破解版\" class=\"headerlink\" title=\"Office 破解版\"></a>Office 破解版</h3><ul>\n<li>从同事那里获得一个<code>pkg</code>和<code>破解补丁.dmg</code>。<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">点击下载</a>。安装时先安装pkg，安装完成后，先不要点击各个office，紧接着安装破解补丁.dmg，安装后在登录，就是可以跳过登录的破解版了。</li>\n</ul>\n<h3 id=\"SourceTree-破解版\"><a href=\"#SourceTree-破解版\" class=\"headerlink\" title=\"SourceTree 破解版\"></a>SourceTree 破解版</h3><ul>\n<li><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">还未上传百度网盘连接</a></li>\n</ul>\n<h3 id=\"SublimeText\"><a href=\"#SublimeText\" class=\"headerlink\" title=\"SublimeText\"></a>SublimeText</h3><ul>\n<li><p>Safiri搜索Chrome，选择Mac下载。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/sublime-install.png\" alt=\"SublimeInstall\"></p>\n</li>\n<li><p>安装后，需要设置字体。打开sublime，依次点击菜单栏<code>SublimeText-&gt;Preferences-&gt;seeting-user</code>，输入以下配置，保存：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"font_face\"</span>: <span class=\"string\">\"Courier New\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"font_size\"</span>: <span class=\"number\">17</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ShadowsocksX-2-6-3\"><a href=\"#ShadowsocksX-2-6-3\" class=\"headerlink\" title=\"ShadowsocksX-2.6.3\"></a>ShadowsocksX-2.6.3</h3><ul>\n<li><a href=\"https://zh.osdn.net/projects/sfnet_shadowsocksgui/downloads/dist/ShadowsocksX-2.6.3.dmg/\" target=\"_blank\" rel=\"noopener\">百度下载</a>.</li>\n</ul>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ul>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>。安装过程中，记得选中`Make sure that /usr/local/bin is in your $PATH.</li>\n<li>Node安装后，是再带npm包管理器的。需要设置淘宝镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置淘宝镜像：npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">设置为原镜像：npm config set registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git-xCode\"><a href=\"#Git-xCode\" class=\"headerlink\" title=\"Git+xCode\"></a>Git+xCode</h3><ul>\n<li>AppStore登录账号，搜索安装xCode即可.Git为xCode自带。安装之后命令行查看git版本即可。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ git version</span><br><span class=\"line\">git version 2.11.0 (Apple Git-81)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"iTerm2-zsh\"><a href=\"#iTerm2-zsh\" class=\"headerlink\" title=\"iTerm2+zsh\"></a>iTerm2+zsh</h3><ul>\n<li><a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">官网下载iTerm2</a>.按照步骤安装即可。</li>\n<li>打开iTerm2，依次点击<code>iterm2-&gt;Perfernce-&gt;Profile</code>，左下角新建<code>Profile</code>并命名如：myzsh。</li>\n<li>任意目录新建文件<code>Monokai-Soda.itermcolors</code>,<a href=\"https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc\" target=\"_blank\" rel=\"noopener\">点击见详细内容</a></li>\n<li>步骤2中的新Profile-myzsh，右侧点击color，右下角点击<code>color presets</code>，选择<code>import</code>刚刚步骤3中创建的文件。记得：左侧点击<code>save defaults</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-1.png\" alt=\"字体设置\"><br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-2.png\" alt=\"字号设置\"><br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/iterm2-3.png\" alt=\"窗口及透明度设置\"></p>\n<ul>\n<li>关闭窗口，重启iTerm2。新建tab，输入如下地址，并输入开机密码，完成安装zsh。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-install.png\" alt=\"zsh安装\"></p>\n<ul>\n<li>关闭窗口，重启iTerm2。发现上方已经变成zsh。<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/Install-Mac/zsh-show.png\" alt=\"zsh展示\"></li>\n</ul>"},{"title":"初识Html5新特性","date":"2017-06-14T13:22:51.000Z","_content":"\n> 偶然的情况下，会被问及平时用过哪些Html5新特性呀？懵逼。顿时懵逼。通过查看文档，了解到，其实我们项目中还是有很多地方用到了新特性。今天我们来一起总结下。\n\n### 概述\n\n+ HTML5 是下一代的 HTML。HTML5 是 W3C 与 WHATWG 合作的结果。\n+ 新特性\n\n> 用于绘画的 canvas 元素\n用于媒介回放的 video 和 audio 元素\n对本地离线存储的更好的支持\n新的特殊内容元素，比如 article、footer、header、nav、section\n新的表单控件，比如 calendar、date、time、email、url、search\n\n<!-- more -->\n\n+ 浏览器支持\n\n> 最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。Internet Explorer 9 将支持某些 HTML5 特性。\n\n### 新特性\n\n| 新特性      | 标签   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n|视频|video|用于视频播放，提供视频播放标准，html新标签|\n|音频|audio|用于音频播放，提供音频播放标准，html新标签|\n|画布|canvas|使用Javacript在网页上绘制图像，html新标签|\n|可伸缩矢量图形|SVG|使用xml定义网络基于矢量的图形，html新标签|\n|地理定位|Geolocation|用于获得用户的地理位置|\n|web存储|localStorage|永久性存储|\n|web存储|sessionStorage|会话性存储|\n|应用程序缓存|cache manifest 文件|使应用进行缓存，并在没有网络的情况下访问。文件三个部分：CACHE MANIFEST，NETWORK，FALLBACK|\n|运行在后台的 JavaScript|Worker|运行在后台的独立脚本，通过postMessage/onmessage来回传和监听消息|\n|服务器发送事件|EventSource|网页自动获取来自服务器的更新|\n\n### 新增Input类型\n| 新Input类型      | 取值   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n| e-mail地址|type=\"email\"|在提交表单时，会自动验证 email 域的值|\n|URL 地址 |type=\"url\"|在提交表单时，会自动验证 url 域的值|\n|数值|type=\"number\"|可设定所接受的数字范围min和max|\n|一定范围的数字| type=\"range\"|显示为滑动条,可以设定对所接受的数字的限定min和max|\n|日期选择器|type=\"date\"|选取日、月、年|\n|日期选择器|type=\"month\"|选取月、年|\n|日期选择器|type=\"week\"|选取周、年|\n|日期选择器|type=\"time\"|选取时间（小时和分钟）|\n|日期选择器|type=\"datetime\"|选取时间、日、月、年（UTC 时间）|\n|日期选择器|type=\"datetime-local\"|选取时间、日、月、年（本地时间）|\n|搜索域|type=\"search\"|显示为常规的文本域|\n\n### 表单元素\n| 表单元素      | 取值   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n|输入域选项表|datalist|通过input标签的list属性指向datalist所在id，即可把 datalist 绑定到输入域|\n|验证用户|keygen|密钥对生成器|\n|不同类型输出|output|比如：计算或脚本输出|\n\n### 表单属性\n| 表单属性     |    描述\t\t|取值|\n| ------------- :|-------------:|-------------:|\n|autocomplete|自动补全功能|on/off|\n|novalidate|提交表单时不应该验证 form 或 input 域|true/false|\n\n### input 属性\n| input属性     |    描述\t\t|取值|\n| ------------- :|-------------:|-------------:|\n|autocomplete|自动补全功能|on/off|\n|autofocus|页面加载时域自动地获得焦点|autofocus|\n|form|输入域所属的一个或多个表单|所属表单的id|\n|height| image 类型的 input 标签的图像高度|数值|\n|width| image 类型的 input 标签的图像宽度|数值|\n|list|输入域的 datalist，datalist 是输入域的选项列表|datalist的id|\n|min|输入域所允许的最小值|数值|\n|max|输入域所允许的最大值|数值|\n|step|输入域规定合法的数字间隔|数值|\n|multiple|输入域中可选择多个值，适用于email 和 file|multiple|\n|pattern|用于验证 input 域的模式，适用于text, search, url, telephone, email 以及 password|正则表达式|\n|placeholder|提示（hint），描述输入域所期待的值，适用于text, search, url, telephone, email 以及 password||\n|required|必填|required|\n\n\n> 我谦好帅~","source":"_posts/初识Html5新特性.md","raw":"---\ntitle: 初识Html5新特性\ndate: 2017-6-14 21:22:51\ntags: \n    - html\n    - html5\n---\n\n> 偶然的情况下，会被问及平时用过哪些Html5新特性呀？懵逼。顿时懵逼。通过查看文档，了解到，其实我们项目中还是有很多地方用到了新特性。今天我们来一起总结下。\n\n### 概述\n\n+ HTML5 是下一代的 HTML。HTML5 是 W3C 与 WHATWG 合作的结果。\n+ 新特性\n\n> 用于绘画的 canvas 元素\n用于媒介回放的 video 和 audio 元素\n对本地离线存储的更好的支持\n新的特殊内容元素，比如 article、footer、header、nav、section\n新的表单控件，比如 calendar、date、time、email、url、search\n\n<!-- more -->\n\n+ 浏览器支持\n\n> 最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。Internet Explorer 9 将支持某些 HTML5 特性。\n\n### 新特性\n\n| 新特性      | 标签   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n|视频|video|用于视频播放，提供视频播放标准，html新标签|\n|音频|audio|用于音频播放，提供音频播放标准，html新标签|\n|画布|canvas|使用Javacript在网页上绘制图像，html新标签|\n|可伸缩矢量图形|SVG|使用xml定义网络基于矢量的图形，html新标签|\n|地理定位|Geolocation|用于获得用户的地理位置|\n|web存储|localStorage|永久性存储|\n|web存储|sessionStorage|会话性存储|\n|应用程序缓存|cache manifest 文件|使应用进行缓存，并在没有网络的情况下访问。文件三个部分：CACHE MANIFEST，NETWORK，FALLBACK|\n|运行在后台的 JavaScript|Worker|运行在后台的独立脚本，通过postMessage/onmessage来回传和监听消息|\n|服务器发送事件|EventSource|网页自动获取来自服务器的更新|\n\n### 新增Input类型\n| 新Input类型      | 取值   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n| e-mail地址|type=\"email\"|在提交表单时，会自动验证 email 域的值|\n|URL 地址 |type=\"url\"|在提交表单时，会自动验证 url 域的值|\n|数值|type=\"number\"|可设定所接受的数字范围min和max|\n|一定范围的数字| type=\"range\"|显示为滑动条,可以设定对所接受的数字的限定min和max|\n|日期选择器|type=\"date\"|选取日、月、年|\n|日期选择器|type=\"month\"|选取月、年|\n|日期选择器|type=\"week\"|选取周、年|\n|日期选择器|type=\"time\"|选取时间（小时和分钟）|\n|日期选择器|type=\"datetime\"|选取时间、日、月、年（UTC 时间）|\n|日期选择器|type=\"datetime-local\"|选取时间、日、月、年（本地时间）|\n|搜索域|type=\"search\"|显示为常规的文本域|\n\n### 表单元素\n| 表单元素      | 取值   |   Description\t\t|\n| ------------- |:-------------:|-------------:|\n|输入域选项表|datalist|通过input标签的list属性指向datalist所在id，即可把 datalist 绑定到输入域|\n|验证用户|keygen|密钥对生成器|\n|不同类型输出|output|比如：计算或脚本输出|\n\n### 表单属性\n| 表单属性     |    描述\t\t|取值|\n| ------------- :|-------------:|-------------:|\n|autocomplete|自动补全功能|on/off|\n|novalidate|提交表单时不应该验证 form 或 input 域|true/false|\n\n### input 属性\n| input属性     |    描述\t\t|取值|\n| ------------- :|-------------:|-------------:|\n|autocomplete|自动补全功能|on/off|\n|autofocus|页面加载时域自动地获得焦点|autofocus|\n|form|输入域所属的一个或多个表单|所属表单的id|\n|height| image 类型的 input 标签的图像高度|数值|\n|width| image 类型的 input 标签的图像宽度|数值|\n|list|输入域的 datalist，datalist 是输入域的选项列表|datalist的id|\n|min|输入域所允许的最小值|数值|\n|max|输入域所允许的最大值|数值|\n|step|输入域规定合法的数字间隔|数值|\n|multiple|输入域中可选择多个值，适用于email 和 file|multiple|\n|pattern|用于验证 input 域的模式，适用于text, search, url, telephone, email 以及 password|正则表达式|\n|placeholder|提示（hint），描述输入域所期待的值，适用于text, search, url, telephone, email 以及 password||\n|required|必填|required|\n\n\n> 我谦好帅~","slug":"初识Html5新特性","published":1,"updated":"2018-09-29T09:57:55.000Z","_id":"cjmn8zogj00072l7oh7uiipdh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>偶然的情况下，会被问及平时用过哪些Html5新特性呀？懵逼。顿时懵逼。通过查看文档，了解到，其实我们项目中还是有很多地方用到了新特性。今天我们来一起总结下。</p>\n</blockquote>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>HTML5 是下一代的 HTML。HTML5 是 W3C 与 WHATWG 合作的结果。</li>\n<li>新特性</li>\n</ul>\n<blockquote>\n<p>用于绘画的 canvas 元素<br>用于媒介回放的 video 和 audio 元素<br>对本地离线存储的更好的支持<br>新的特殊内容元素，比如 article、footer、header、nav、section<br>新的表单控件，比如 calendar、date、time、email、url、search</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>浏览器支持</li>\n</ul>\n<blockquote>\n<p>最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。Internet Explorer 9 将支持某些 HTML5 特性。</p>\n</blockquote>\n<h3 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h3><table>\n<thead>\n<tr>\n<th>新特性</th>\n<th style=\"text-align:center\">标签</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>视频</td>\n<td style=\"text-align:center\">video</td>\n<td style=\"text-align:right\">用于视频播放，提供视频播放标准，html新标签</td>\n</tr>\n<tr>\n<td>音频</td>\n<td style=\"text-align:center\">audio</td>\n<td style=\"text-align:right\">用于音频播放，提供音频播放标准，html新标签</td>\n</tr>\n<tr>\n<td>画布</td>\n<td style=\"text-align:center\">canvas</td>\n<td style=\"text-align:right\">使用Javacript在网页上绘制图像，html新标签</td>\n</tr>\n<tr>\n<td>可伸缩矢量图形</td>\n<td style=\"text-align:center\">SVG</td>\n<td style=\"text-align:right\">使用xml定义网络基于矢量的图形，html新标签</td>\n</tr>\n<tr>\n<td>地理定位</td>\n<td style=\"text-align:center\">Geolocation</td>\n<td style=\"text-align:right\">用于获得用户的地理位置</td>\n</tr>\n<tr>\n<td>web存储</td>\n<td style=\"text-align:center\">localStorage</td>\n<td style=\"text-align:right\">永久性存储</td>\n</tr>\n<tr>\n<td>web存储</td>\n<td style=\"text-align:center\">sessionStorage</td>\n<td style=\"text-align:right\">会话性存储</td>\n</tr>\n<tr>\n<td>应用程序缓存</td>\n<td style=\"text-align:center\">cache manifest 文件</td>\n<td style=\"text-align:right\">使应用进行缓存，并在没有网络的情况下访问。文件三个部分：CACHE MANIFEST，NETWORK，FALLBACK</td>\n</tr>\n<tr>\n<td>运行在后台的 JavaScript</td>\n<td style=\"text-align:center\">Worker</td>\n<td style=\"text-align:right\">运行在后台的独立脚本，通过postMessage/onmessage来回传和监听消息</td>\n</tr>\n<tr>\n<td>服务器发送事件</td>\n<td style=\"text-align:center\">EventSource</td>\n<td style=\"text-align:right\">网页自动获取来自服务器的更新</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"新增Input类型\"><a href=\"#新增Input类型\" class=\"headerlink\" title=\"新增Input类型\"></a>新增Input类型</h3><table>\n<thead>\n<tr>\n<th>新Input类型</th>\n<th style=\"text-align:center\">取值</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>e-mail地址</td>\n<td style=\"text-align:center\">type=”email”</td>\n<td style=\"text-align:right\">在提交表单时，会自动验证 email 域的值</td>\n</tr>\n<tr>\n<td>URL 地址</td>\n<td style=\"text-align:center\">type=”url”</td>\n<td style=\"text-align:right\">在提交表单时，会自动验证 url 域的值</td>\n</tr>\n<tr>\n<td>数值</td>\n<td style=\"text-align:center\">type=”number”</td>\n<td style=\"text-align:right\">可设定所接受的数字范围min和max</td>\n</tr>\n<tr>\n<td>一定范围的数字</td>\n<td style=\"text-align:center\">type=”range”</td>\n<td style=\"text-align:right\">显示为滑动条,可以设定对所接受的数字的限定min和max</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”date”</td>\n<td style=\"text-align:right\">选取日、月、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”month”</td>\n<td style=\"text-align:right\">选取月、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”week”</td>\n<td style=\"text-align:right\">选取周、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”time”</td>\n<td style=\"text-align:right\">选取时间（小时和分钟）</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”datetime”</td>\n<td style=\"text-align:right\">选取时间、日、月、年（UTC 时间）</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”datetime-local”</td>\n<td style=\"text-align:right\">选取时间、日、月、年（本地时间）</td>\n</tr>\n<tr>\n<td>搜索域</td>\n<td style=\"text-align:center\">type=”search”</td>\n<td style=\"text-align:right\">显示为常规的文本域</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h3><table>\n<thead>\n<tr>\n<th>表单元素</th>\n<th style=\"text-align:center\">取值</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入域选项表</td>\n<td style=\"text-align:center\">datalist</td>\n<td style=\"text-align:right\">通过input标签的list属性指向datalist所在id，即可把 datalist 绑定到输入域</td>\n</tr>\n<tr>\n<td>验证用户</td>\n<td style=\"text-align:center\">keygen</td>\n<td style=\"text-align:right\">密钥对生成器</td>\n</tr>\n<tr>\n<td>不同类型输出</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:right\">比如：计算或脚本输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"表单属性\"><a href=\"#表单属性\" class=\"headerlink\" title=\"表单属性\"></a>表单属性</h3><table>\n<thead>\n<tr>\n<th>表单属性</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">取值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autocomplete</td>\n<td style=\"text-align:right\">自动补全功能</td>\n<td style=\"text-align:right\">on/off</td>\n</tr>\n<tr>\n<td>novalidate</td>\n<td style=\"text-align:right\">提交表单时不应该验证 form 或 input 域</td>\n<td style=\"text-align:right\">true/false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"input-属性\"><a href=\"#input-属性\" class=\"headerlink\" title=\"input 属性\"></a>input 属性</h3><table>\n<thead>\n<tr>\n<th>input属性</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">取值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autocomplete</td>\n<td style=\"text-align:right\">自动补全功能</td>\n<td style=\"text-align:right\">on/off</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td style=\"text-align:right\">页面加载时域自动地获得焦点</td>\n<td style=\"text-align:right\">autofocus</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:right\">输入域所属的一个或多个表单</td>\n<td style=\"text-align:right\">所属表单的id</td>\n</tr>\n<tr>\n<td>height</td>\n<td style=\"text-align:right\">image 类型的 input 标签的图像高度</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>width</td>\n<td style=\"text-align:right\">image 类型的 input 标签的图像宽度</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>list</td>\n<td style=\"text-align:right\">输入域的 datalist，datalist 是输入域的选项列表</td>\n<td style=\"text-align:right\">datalist的id</td>\n</tr>\n<tr>\n<td>min</td>\n<td style=\"text-align:right\">输入域所允许的最小值</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>max</td>\n<td style=\"text-align:right\">输入域所允许的最大值</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>step</td>\n<td style=\"text-align:right\">输入域规定合法的数字间隔</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td style=\"text-align:right\">输入域中可选择多个值，适用于email 和 file</td>\n<td style=\"text-align:right\">multiple</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td style=\"text-align:right\">用于验证 input 域的模式，适用于text, search, url, telephone, email 以及 password</td>\n<td style=\"text-align:right\">正则表达式</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td style=\"text-align:right\">提示（hint），描述输入域所期待的值，适用于text, search, url, telephone, email 以及 password</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>required</td>\n<td style=\"text-align:right\">必填</td>\n<td style=\"text-align:right\">required</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>我谦好帅~</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>偶然的情况下，会被问及平时用过哪些Html5新特性呀？懵逼。顿时懵逼。通过查看文档，了解到，其实我们项目中还是有很多地方用到了新特性。今天我们来一起总结下。</p>\n</blockquote>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>HTML5 是下一代的 HTML。HTML5 是 W3C 与 WHATWG 合作的结果。</li>\n<li>新特性</li>\n</ul>\n<blockquote>\n<p>用于绘画的 canvas 元素<br>用于媒介回放的 video 和 audio 元素<br>对本地离线存储的更好的支持<br>新的特殊内容元素，比如 article、footer、header、nav、section<br>新的表单控件，比如 calendar、date、time、email、url、search</p>\n</blockquote>","more":"<ul>\n<li>浏览器支持</li>\n</ul>\n<blockquote>\n<p>最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。Internet Explorer 9 将支持某些 HTML5 特性。</p>\n</blockquote>\n<h3 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h3><table>\n<thead>\n<tr>\n<th>新特性</th>\n<th style=\"text-align:center\">标签</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>视频</td>\n<td style=\"text-align:center\">video</td>\n<td style=\"text-align:right\">用于视频播放，提供视频播放标准，html新标签</td>\n</tr>\n<tr>\n<td>音频</td>\n<td style=\"text-align:center\">audio</td>\n<td style=\"text-align:right\">用于音频播放，提供音频播放标准，html新标签</td>\n</tr>\n<tr>\n<td>画布</td>\n<td style=\"text-align:center\">canvas</td>\n<td style=\"text-align:right\">使用Javacript在网页上绘制图像，html新标签</td>\n</tr>\n<tr>\n<td>可伸缩矢量图形</td>\n<td style=\"text-align:center\">SVG</td>\n<td style=\"text-align:right\">使用xml定义网络基于矢量的图形，html新标签</td>\n</tr>\n<tr>\n<td>地理定位</td>\n<td style=\"text-align:center\">Geolocation</td>\n<td style=\"text-align:right\">用于获得用户的地理位置</td>\n</tr>\n<tr>\n<td>web存储</td>\n<td style=\"text-align:center\">localStorage</td>\n<td style=\"text-align:right\">永久性存储</td>\n</tr>\n<tr>\n<td>web存储</td>\n<td style=\"text-align:center\">sessionStorage</td>\n<td style=\"text-align:right\">会话性存储</td>\n</tr>\n<tr>\n<td>应用程序缓存</td>\n<td style=\"text-align:center\">cache manifest 文件</td>\n<td style=\"text-align:right\">使应用进行缓存，并在没有网络的情况下访问。文件三个部分：CACHE MANIFEST，NETWORK，FALLBACK</td>\n</tr>\n<tr>\n<td>运行在后台的 JavaScript</td>\n<td style=\"text-align:center\">Worker</td>\n<td style=\"text-align:right\">运行在后台的独立脚本，通过postMessage/onmessage来回传和监听消息</td>\n</tr>\n<tr>\n<td>服务器发送事件</td>\n<td style=\"text-align:center\">EventSource</td>\n<td style=\"text-align:right\">网页自动获取来自服务器的更新</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"新增Input类型\"><a href=\"#新增Input类型\" class=\"headerlink\" title=\"新增Input类型\"></a>新增Input类型</h3><table>\n<thead>\n<tr>\n<th>新Input类型</th>\n<th style=\"text-align:center\">取值</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>e-mail地址</td>\n<td style=\"text-align:center\">type=”email”</td>\n<td style=\"text-align:right\">在提交表单时，会自动验证 email 域的值</td>\n</tr>\n<tr>\n<td>URL 地址</td>\n<td style=\"text-align:center\">type=”url”</td>\n<td style=\"text-align:right\">在提交表单时，会自动验证 url 域的值</td>\n</tr>\n<tr>\n<td>数值</td>\n<td style=\"text-align:center\">type=”number”</td>\n<td style=\"text-align:right\">可设定所接受的数字范围min和max</td>\n</tr>\n<tr>\n<td>一定范围的数字</td>\n<td style=\"text-align:center\">type=”range”</td>\n<td style=\"text-align:right\">显示为滑动条,可以设定对所接受的数字的限定min和max</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”date”</td>\n<td style=\"text-align:right\">选取日、月、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”month”</td>\n<td style=\"text-align:right\">选取月、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”week”</td>\n<td style=\"text-align:right\">选取周、年</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”time”</td>\n<td style=\"text-align:right\">选取时间（小时和分钟）</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”datetime”</td>\n<td style=\"text-align:right\">选取时间、日、月、年（UTC 时间）</td>\n</tr>\n<tr>\n<td>日期选择器</td>\n<td style=\"text-align:center\">type=”datetime-local”</td>\n<td style=\"text-align:right\">选取时间、日、月、年（本地时间）</td>\n</tr>\n<tr>\n<td>搜索域</td>\n<td style=\"text-align:center\">type=”search”</td>\n<td style=\"text-align:right\">显示为常规的文本域</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h3><table>\n<thead>\n<tr>\n<th>表单元素</th>\n<th style=\"text-align:center\">取值</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入域选项表</td>\n<td style=\"text-align:center\">datalist</td>\n<td style=\"text-align:right\">通过input标签的list属性指向datalist所在id，即可把 datalist 绑定到输入域</td>\n</tr>\n<tr>\n<td>验证用户</td>\n<td style=\"text-align:center\">keygen</td>\n<td style=\"text-align:right\">密钥对生成器</td>\n</tr>\n<tr>\n<td>不同类型输出</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:right\">比如：计算或脚本输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"表单属性\"><a href=\"#表单属性\" class=\"headerlink\" title=\"表单属性\"></a>表单属性</h3><table>\n<thead>\n<tr>\n<th>表单属性</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">取值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autocomplete</td>\n<td style=\"text-align:right\">自动补全功能</td>\n<td style=\"text-align:right\">on/off</td>\n</tr>\n<tr>\n<td>novalidate</td>\n<td style=\"text-align:right\">提交表单时不应该验证 form 或 input 域</td>\n<td style=\"text-align:right\">true/false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"input-属性\"><a href=\"#input-属性\" class=\"headerlink\" title=\"input 属性\"></a>input 属性</h3><table>\n<thead>\n<tr>\n<th>input属性</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">取值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autocomplete</td>\n<td style=\"text-align:right\">自动补全功能</td>\n<td style=\"text-align:right\">on/off</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td style=\"text-align:right\">页面加载时域自动地获得焦点</td>\n<td style=\"text-align:right\">autofocus</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:right\">输入域所属的一个或多个表单</td>\n<td style=\"text-align:right\">所属表单的id</td>\n</tr>\n<tr>\n<td>height</td>\n<td style=\"text-align:right\">image 类型的 input 标签的图像高度</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>width</td>\n<td style=\"text-align:right\">image 类型的 input 标签的图像宽度</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>list</td>\n<td style=\"text-align:right\">输入域的 datalist，datalist 是输入域的选项列表</td>\n<td style=\"text-align:right\">datalist的id</td>\n</tr>\n<tr>\n<td>min</td>\n<td style=\"text-align:right\">输入域所允许的最小值</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>max</td>\n<td style=\"text-align:right\">输入域所允许的最大值</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>step</td>\n<td style=\"text-align:right\">输入域规定合法的数字间隔</td>\n<td style=\"text-align:right\">数值</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td style=\"text-align:right\">输入域中可选择多个值，适用于email 和 file</td>\n<td style=\"text-align:right\">multiple</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td style=\"text-align:right\">用于验证 input 域的模式，适用于text, search, url, telephone, email 以及 password</td>\n<td style=\"text-align:right\">正则表达式</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td style=\"text-align:right\">提示（hint），描述输入域所期待的值，适用于text, search, url, telephone, email 以及 password</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>required</td>\n<td style=\"text-align:right\">必填</td>\n<td style=\"text-align:right\">required</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>我谦好帅~</p>\n</blockquote>"},{"title":"基于Vue+iView+Koa+Mongodb的后台管理系统--客户端","date":"2017-05-16T14:17:12.000Z","_content":"> 经过6天的奋战，一个后台管理系统已经新鲜出炉了。感觉主要是闲的蛋疼。没事瞎搞。哈哈。\n\n记得在[上一篇博客](https://liujinhuan.github.io/2017/05/01/MongoDB%E7%9A%84%E5%AE%9E%E6%88%98/#more)的尾巴中，承诺大家要做一个前后台通杀的小系统，以在实际的项目中运用。话不多说~开始吧。\n\n### 前言\n\n> 项目来源于大学的毕业设计，仅在实现CURD功能。其中，个别例子存在不合理之处(如：用户密码明文展示在表格中等)，请自行忽略，不要较真儿哦~\n\n### 项目及技术介绍\n\n> 该管理系统主要包括登录、图书管理、用户管理三个部分。可以实现图书与用户的CURD操作。其中admin用户属于管理员，可以操作用户管理，而其余用户则只能操作图书管理。具体的角色权限关系还未考虑在其中，感兴趣的同学，可以自行添加。\n\n<!-- more -->\n\n+ client\n\n整体采用Vue框架。通过`vue-cli`脚手架工具生成前端基本项目目录，通过`vue-router`组件实现单页面路由，通过`vue-resource`实现数据请求的发送，通过`iView`前端UI框架实现页面的展示。\n\n+ server\n\n整体采用Koa框架。通过`generator-koa2-rest`脚手架工具生成后端基本项目目录，通过`mongoose`中间件完成和数据库的链接，通过`koa-router`中间件实现接口的路由，通过`koa-bodyparser`中间件获取用户的请求参数，通过`koa-cors`中间件解决跨域请求。\n\n\n### Client搭建\n\n+ 全局安装 vue-cli\n\n```javascript\nnpm install --global vue-cli\n```\n\n+ 创建一个基于 webpack 模板的新项目\n\n```javascript\nvue init webpack client(目录名称)\n```\n![基于 webpack 模板的新项目](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/1.png)\n\n+ 安装依赖及运行\n\n```javascript\ncd client && npm install && npm run dev\n```\n\n+ 安装iView\n\n```javascript\nnpm install iview --save\n```\n![安装iView](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/2.png)\n\n\n+ 在 webpack 入口页面 main.js 中配置iView：\n\n```javascript\nimport iView from 'iview'\nimport 'iview/dist/styles/iview.css'   // 使用 CSS\n\nVue.use(iView);\t\t\t//引用iView组件\n```\n\n+ 具体使用可参照[iView官网API](https://www.iviewui.com/)在vue文件中进行引用和操作等。\n\n+ 引入vue-resource和vue-router组件\n```javascript\nimport VueResource from 'vue-resource'\nVue.use(VueResource)\n\nimport Router from 'vue-router'\nVue.use(Router)\n```\n\n### 过程记录\n\n+ 各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。\n\n+ 路由：创建完模块页面之后，在router/index.js中记得导入和配置路由。\n+ 子路由：后期的路由部分做了比较大的调整，主要为了解决引入菜单栏后，目标页面无法显示在内容区的问题。\n\n```javascript\nexport default new Router({\n  mode: 'history', // 指定路由采用history方式\n  routes: [\n    {\n      path: '/home',\n      name: 'home',\n      component: Home,\n      children: [ //如下路由均为home的子路由,使其可以显示在home的路由之下\n        {\n          path: '/',\n          name: 'home',\n          component: BookList\n        },\n        {\n          path: '/booklist',\n          name: 'booklist',\n          component: BookList\n        },\n        。。。。。。// 省略号\n        { \n          path: '/userdetail', \n          name: 'userdetail',\n          component: UserDetail\n        }\n      ]\n    },\n    {\n      path: '/',\n      name: 'login',\n      component: Login\n    }\n\n  ]\n})\n```\n+ 请求的发送：采用引入`vue-resource`来触发http请求。如：\n\n```javascript\nthis.$http.post/get(Url地址,入参).then(response => {\n    response\t// 成功接口返回值\n}, response => {\n    response\t// 失败接口返回值\n});\n```\n\n+ 页面跳转：采用`vue-router`进行单页面路由\n\n```javascript\nthis.$router.go(-1);    // 后退页面\nthis.$router.push({ name: 'bookdetail' , query: { bookid: this.data[index]._id }});\t\t// 参数在url的页面跳转\nthis.$router.push({ name: 'bookupdate', params: { book:updateBook }});\t// 参数在body中的页面跳转\nthis.$router.push({name:'bookadd'});\t// 不带参数的跳转\n```\n\n+ 工具类：该项目有store本地存储和url请求地址两个工具类，引用时注意路径。后在`webpack.base.conf.js`中发现`@`路径代表的就是当前根目录`src`，所以可直接如下方式引用\n\n```javascript\nimport Store from '@/utils/store'\nimport Url from '@/utils/url'\n```\n\n### 项目截图\n+ 登录\n![Login](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/login.png)\n+ home主页\n![home](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/home.png)\n+ 图书列表的请求\n![booklist](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/booklist.png)\n+ 图书的添加\n![bookadd](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookadd.png)\n+ 图书的修改\n![bookupdate](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookupdate.png)\n+ 图书的详情\n![bookdetail](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdetail.png)\n+ 图书的删除\n![bookdelete](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdelete.png)\n\n\n> 有种喜悦叫做从无到有。Server端的博客后续推出~敬请期待。","source":"_posts/基于Vue+iView+Koa+Mongodb的后台管理系统--客户端.md","raw":"---\ntitle: 基于Vue+iView+Koa+Mongodb的后台管理系统--客户端\ndate: 2017-5-16 22:17:12\ntags: \n\t- Vue\n\t- iView\n\t- Koa\n\t- Mongodb\n\t- vue-router\n\t- koa-router\n\t- vue-resource\n---\n> 经过6天的奋战，一个后台管理系统已经新鲜出炉了。感觉主要是闲的蛋疼。没事瞎搞。哈哈。\n\n记得在[上一篇博客](https://liujinhuan.github.io/2017/05/01/MongoDB%E7%9A%84%E5%AE%9E%E6%88%98/#more)的尾巴中，承诺大家要做一个前后台通杀的小系统，以在实际的项目中运用。话不多说~开始吧。\n\n### 前言\n\n> 项目来源于大学的毕业设计，仅在实现CURD功能。其中，个别例子存在不合理之处(如：用户密码明文展示在表格中等)，请自行忽略，不要较真儿哦~\n\n### 项目及技术介绍\n\n> 该管理系统主要包括登录、图书管理、用户管理三个部分。可以实现图书与用户的CURD操作。其中admin用户属于管理员，可以操作用户管理，而其余用户则只能操作图书管理。具体的角色权限关系还未考虑在其中，感兴趣的同学，可以自行添加。\n\n<!-- more -->\n\n+ client\n\n整体采用Vue框架。通过`vue-cli`脚手架工具生成前端基本项目目录，通过`vue-router`组件实现单页面路由，通过`vue-resource`实现数据请求的发送，通过`iView`前端UI框架实现页面的展示。\n\n+ server\n\n整体采用Koa框架。通过`generator-koa2-rest`脚手架工具生成后端基本项目目录，通过`mongoose`中间件完成和数据库的链接，通过`koa-router`中间件实现接口的路由，通过`koa-bodyparser`中间件获取用户的请求参数，通过`koa-cors`中间件解决跨域请求。\n\n\n### Client搭建\n\n+ 全局安装 vue-cli\n\n```javascript\nnpm install --global vue-cli\n```\n\n+ 创建一个基于 webpack 模板的新项目\n\n```javascript\nvue init webpack client(目录名称)\n```\n![基于 webpack 模板的新项目](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/1.png)\n\n+ 安装依赖及运行\n\n```javascript\ncd client && npm install && npm run dev\n```\n\n+ 安装iView\n\n```javascript\nnpm install iview --save\n```\n![安装iView](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/2.png)\n\n\n+ 在 webpack 入口页面 main.js 中配置iView：\n\n```javascript\nimport iView from 'iview'\nimport 'iview/dist/styles/iview.css'   // 使用 CSS\n\nVue.use(iView);\t\t\t//引用iView组件\n```\n\n+ 具体使用可参照[iView官网API](https://www.iviewui.com/)在vue文件中进行引用和操作等。\n\n+ 引入vue-resource和vue-router组件\n```javascript\nimport VueResource from 'vue-resource'\nVue.use(VueResource)\n\nimport Router from 'vue-router'\nVue.use(Router)\n```\n\n### 过程记录\n\n+ 各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。\n\n+ 路由：创建完模块页面之后，在router/index.js中记得导入和配置路由。\n+ 子路由：后期的路由部分做了比较大的调整，主要为了解决引入菜单栏后，目标页面无法显示在内容区的问题。\n\n```javascript\nexport default new Router({\n  mode: 'history', // 指定路由采用history方式\n  routes: [\n    {\n      path: '/home',\n      name: 'home',\n      component: Home,\n      children: [ //如下路由均为home的子路由,使其可以显示在home的路由之下\n        {\n          path: '/',\n          name: 'home',\n          component: BookList\n        },\n        {\n          path: '/booklist',\n          name: 'booklist',\n          component: BookList\n        },\n        。。。。。。// 省略号\n        { \n          path: '/userdetail', \n          name: 'userdetail',\n          component: UserDetail\n        }\n      ]\n    },\n    {\n      path: '/',\n      name: 'login',\n      component: Login\n    }\n\n  ]\n})\n```\n+ 请求的发送：采用引入`vue-resource`来触发http请求。如：\n\n```javascript\nthis.$http.post/get(Url地址,入参).then(response => {\n    response\t// 成功接口返回值\n}, response => {\n    response\t// 失败接口返回值\n});\n```\n\n+ 页面跳转：采用`vue-router`进行单页面路由\n\n```javascript\nthis.$router.go(-1);    // 后退页面\nthis.$router.push({ name: 'bookdetail' , query: { bookid: this.data[index]._id }});\t\t// 参数在url的页面跳转\nthis.$router.push({ name: 'bookupdate', params: { book:updateBook }});\t// 参数在body中的页面跳转\nthis.$router.push({name:'bookadd'});\t// 不带参数的跳转\n```\n\n+ 工具类：该项目有store本地存储和url请求地址两个工具类，引用时注意路径。后在`webpack.base.conf.js`中发现`@`路径代表的就是当前根目录`src`，所以可直接如下方式引用\n\n```javascript\nimport Store from '@/utils/store'\nimport Url from '@/utils/url'\n```\n\n### 项目截图\n+ 登录\n![Login](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/login.png)\n+ home主页\n![home](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/home.png)\n+ 图书列表的请求\n![booklist](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/booklist.png)\n+ 图书的添加\n![bookadd](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookadd.png)\n+ 图书的修改\n![bookupdate](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookupdate.png)\n+ 图书的详情\n![bookdetail](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdetail.png)\n+ 图书的删除\n![bookdelete](https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdelete.png)\n\n\n> 有种喜悦叫做从无到有。Server端的博客后续推出~敬请期待。","slug":"基于Vue+iView+Koa+Mongodb的后台管理系统--客户端","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zogk00082l7oqq27w99i","content":"<blockquote>\n<p>经过6天的奋战，一个后台管理系统已经新鲜出炉了。感觉主要是闲的蛋疼。没事瞎搞。哈哈。</p>\n</blockquote>\n<p>记得在<a href=\"https://liujinhuan.github.io/2017/05/01/MongoDB%E7%9A%84%E5%AE%9E%E6%88%98/#more\" target=\"_blank\" rel=\"noopener\">上一篇博客</a>的尾巴中，承诺大家要做一个前后台通杀的小系统，以在实际的项目中运用。话不多说~开始吧。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>项目来源于大学的毕业设计，仅在实现CURD功能。其中，个别例子存在不合理之处(如：用户密码明文展示在表格中等)，请自行忽略，不要较真儿哦~</p>\n</blockquote>\n<h3 id=\"项目及技术介绍\"><a href=\"#项目及技术介绍\" class=\"headerlink\" title=\"项目及技术介绍\"></a>项目及技术介绍</h3><blockquote>\n<p>该管理系统主要包括登录、图书管理、用户管理三个部分。可以实现图书与用户的CURD操作。其中admin用户属于管理员，可以操作用户管理，而其余用户则只能操作图书管理。具体的角色权限关系还未考虑在其中，感兴趣的同学，可以自行添加。</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>client</li>\n</ul>\n<p>整体采用Vue框架。通过<code>vue-cli</code>脚手架工具生成前端基本项目目录，通过<code>vue-router</code>组件实现单页面路由，通过<code>vue-resource</code>实现数据请求的发送，通过<code>iView</code>前端UI框架实现页面的展示。</p>\n<ul>\n<li>server</li>\n</ul>\n<p>整体采用Koa框架。通过<code>generator-koa2-rest</code>脚手架工具生成后端基本项目目录，通过<code>mongoose</code>中间件完成和数据库的链接，通过<code>koa-router</code>中间件实现接口的路由，通过<code>koa-bodyparser</code>中间件获取用户的请求参数，通过<code>koa-cors</code>中间件解决跨域请求。</p>\n<h3 id=\"Client搭建\"><a href=\"#Client搭建\" class=\"headerlink\" title=\"Client搭建\"></a>Client搭建</h3><ul>\n<li>全局安装 vue-cli</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建一个基于 webpack 模板的新项目</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack client(目录名称)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/1.png\" alt=\"基于 webpack 模板的新项目\"></p>\n<ul>\n<li>安装依赖及运行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd client &amp;&amp; npm install &amp;&amp; npm run dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装iView</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install iview --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/2.png\" alt=\"安装iView\"></p>\n<ul>\n<li>在 webpack 入口页面 main.js 中配置iView：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'iview/dist/styles/iview.css'</span>   <span class=\"comment\">// 使用 CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView);\t\t\t<span class=\"comment\">//引用iView组件</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>具体使用可参照<a href=\"https://www.iviewui.com/\" target=\"_blank\" rel=\"noopener\">iView官网API</a>在vue文件中进行引用和操作等。</p>\n</li>\n<li><p>引入vue-resource和vue-router组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueResource <span class=\"keyword\">from</span> <span class=\"string\">'vue-resource'</span></span><br><span class=\"line\">Vue.use(VueResource)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(Router)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><ul>\n<li><p>各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。</p>\n</li>\n<li><p>路由：创建完模块页面之后，在router/index.js中记得导入和配置路由。</p>\n</li>\n<li>子路由：后期的路由部分做了比较大的调整，主要为了解决引入菜单栏后，目标页面无法显示在内容区的问题。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>, <span class=\"comment\">// 指定路由采用history方式</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">      component: Home,</span><br><span class=\"line\">      children: [ <span class=\"comment\">//如下路由均为home的子路由,使其可以显示在home的路由之下</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">          component: BookList</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">'/booklist'</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'booklist'</span>,</span><br><span class=\"line\">          component: BookList</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        。。。。。。<span class=\"comment\">// 省略号</span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">          path: <span class=\"string\">'/userdetail'</span>, </span><br><span class=\"line\">          name: <span class=\"string\">'userdetail'</span>,</span><br><span class=\"line\">          component: UserDetail</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求的发送：采用引入<code>vue-resource</code>来触发http请求。如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http.post/get(Url地址,入参).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    response\t<span class=\"comment\">// 成功接口返回值</span></span><br><span class=\"line\">&#125;, response =&gt; &#123;</span><br><span class=\"line\">    response\t<span class=\"comment\">// 失败接口返回值</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面跳转：采用<code>vue-router</code>进行单页面路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>);    <span class=\"comment\">// 后退页面</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'bookdetail'</span> , <span class=\"attr\">query</span>: &#123; <span class=\"attr\">bookid</span>: <span class=\"keyword\">this</span>.data[index]._id &#125;&#125;);\t\t<span class=\"comment\">// 参数在url的页面跳转</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'bookupdate'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">book</span>:updateBook &#125;&#125;);\t<span class=\"comment\">// 参数在body中的页面跳转</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'bookadd'</span>&#125;);\t<span class=\"comment\">// 不带参数的跳转</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>工具类：该项目有store本地存储和url请求地址两个工具类，引用时注意路径。后在<code>webpack.base.conf.js</code>中发现<code>@</code>路径代表的就是当前根目录<code>src</code>，所以可直接如下方式引用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Store <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Url <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/url'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h3><ul>\n<li>登录<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/login.png\" alt=\"Login\"></li>\n<li>home主页<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/home.png\" alt=\"home\"></li>\n<li>图书列表的请求<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/booklist.png\" alt=\"booklist\"></li>\n<li>图书的添加<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookadd.png\" alt=\"bookadd\"></li>\n<li>图书的修改<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookupdate.png\" alt=\"bookupdate\"></li>\n<li>图书的详情<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdetail.png\" alt=\"bookdetail\"></li>\n<li>图书的删除<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdelete.png\" alt=\"bookdelete\"></li>\n</ul>\n<blockquote>\n<p>有种喜悦叫做从无到有。Server端的博客后续推出~敬请期待。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>经过6天的奋战，一个后台管理系统已经新鲜出炉了。感觉主要是闲的蛋疼。没事瞎搞。哈哈。</p>\n</blockquote>\n<p>记得在<a href=\"https://liujinhuan.github.io/2017/05/01/MongoDB%E7%9A%84%E5%AE%9E%E6%88%98/#more\" target=\"_blank\" rel=\"noopener\">上一篇博客</a>的尾巴中，承诺大家要做一个前后台通杀的小系统，以在实际的项目中运用。话不多说~开始吧。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>项目来源于大学的毕业设计，仅在实现CURD功能。其中，个别例子存在不合理之处(如：用户密码明文展示在表格中等)，请自行忽略，不要较真儿哦~</p>\n</blockquote>\n<h3 id=\"项目及技术介绍\"><a href=\"#项目及技术介绍\" class=\"headerlink\" title=\"项目及技术介绍\"></a>项目及技术介绍</h3><blockquote>\n<p>该管理系统主要包括登录、图书管理、用户管理三个部分。可以实现图书与用户的CURD操作。其中admin用户属于管理员，可以操作用户管理，而其余用户则只能操作图书管理。具体的角色权限关系还未考虑在其中，感兴趣的同学，可以自行添加。</p>\n</blockquote>","more":"<ul>\n<li>client</li>\n</ul>\n<p>整体采用Vue框架。通过<code>vue-cli</code>脚手架工具生成前端基本项目目录，通过<code>vue-router</code>组件实现单页面路由，通过<code>vue-resource</code>实现数据请求的发送，通过<code>iView</code>前端UI框架实现页面的展示。</p>\n<ul>\n<li>server</li>\n</ul>\n<p>整体采用Koa框架。通过<code>generator-koa2-rest</code>脚手架工具生成后端基本项目目录，通过<code>mongoose</code>中间件完成和数据库的链接，通过<code>koa-router</code>中间件实现接口的路由，通过<code>koa-bodyparser</code>中间件获取用户的请求参数，通过<code>koa-cors</code>中间件解决跨域请求。</p>\n<h3 id=\"Client搭建\"><a href=\"#Client搭建\" class=\"headerlink\" title=\"Client搭建\"></a>Client搭建</h3><ul>\n<li>全局安装 vue-cli</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建一个基于 webpack 模板的新项目</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack client(目录名称)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/1.png\" alt=\"基于 webpack 模板的新项目\"></p>\n<ul>\n<li>安装依赖及运行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd client &amp;&amp; npm install &amp;&amp; npm run dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装iView</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install iview --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/2.png\" alt=\"安装iView\"></p>\n<ul>\n<li>在 webpack 入口页面 main.js 中配置iView：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> iView <span class=\"keyword\">from</span> <span class=\"string\">'iview'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'iview/dist/styles/iview.css'</span>   <span class=\"comment\">// 使用 CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(iView);\t\t\t<span class=\"comment\">//引用iView组件</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>具体使用可参照<a href=\"https://www.iviewui.com/\" target=\"_blank\" rel=\"noopener\">iView官网API</a>在vue文件中进行引用和操作等。</p>\n</li>\n<li><p>引入vue-resource和vue-router组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueResource <span class=\"keyword\">from</span> <span class=\"string\">'vue-resource'</span></span><br><span class=\"line\">Vue.use(VueResource)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(Router)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><ul>\n<li><p>各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。</p>\n</li>\n<li><p>路由：创建完模块页面之后，在router/index.js中记得导入和配置路由。</p>\n</li>\n<li>子路由：后期的路由部分做了比较大的调整，主要为了解决引入菜单栏后，目标页面无法显示在内容区的问题。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>, <span class=\"comment\">// 指定路由采用history方式</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">      component: Home,</span><br><span class=\"line\">      children: [ <span class=\"comment\">//如下路由均为home的子路由,使其可以显示在home的路由之下</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">          component: BookList</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">'/booklist'</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'booklist'</span>,</span><br><span class=\"line\">          component: BookList</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        。。。。。。<span class=\"comment\">// 省略号</span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">          path: <span class=\"string\">'/userdetail'</span>, </span><br><span class=\"line\">          name: <span class=\"string\">'userdetail'</span>,</span><br><span class=\"line\">          component: UserDetail</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求的发送：采用引入<code>vue-resource</code>来触发http请求。如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http.post/get(Url地址,入参).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    response\t<span class=\"comment\">// 成功接口返回值</span></span><br><span class=\"line\">&#125;, response =&gt; &#123;</span><br><span class=\"line\">    response\t<span class=\"comment\">// 失败接口返回值</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面跳转：采用<code>vue-router</code>进行单页面路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>);    <span class=\"comment\">// 后退页面</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'bookdetail'</span> , <span class=\"attr\">query</span>: &#123; <span class=\"attr\">bookid</span>: <span class=\"keyword\">this</span>.data[index]._id &#125;&#125;);\t\t<span class=\"comment\">// 参数在url的页面跳转</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'bookupdate'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">book</span>:updateBook &#125;&#125;);\t<span class=\"comment\">// 参数在body中的页面跳转</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'bookadd'</span>&#125;);\t<span class=\"comment\">// 不带参数的跳转</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>工具类：该项目有store本地存储和url请求地址两个工具类，引用时注意路径。后在<code>webpack.base.conf.js</code>中发现<code>@</code>路径代表的就是当前根目录<code>src</code>，所以可直接如下方式引用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Store <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Url <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/url'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h3><ul>\n<li>登录<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/login.png\" alt=\"Login\"></li>\n<li>home主页<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/home.png\" alt=\"home\"></li>\n<li>图书列表的请求<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/booklist.png\" alt=\"booklist\"></li>\n<li>图书的添加<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookadd.png\" alt=\"bookadd\"></li>\n<li>图书的修改<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookupdate.png\" alt=\"bookupdate\"></li>\n<li>图书的详情<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdetail.png\" alt=\"bookdetail\"></li>\n<li>图书的删除<br><img src=\"https://raw.githubusercontent.com/liujinhuan/StaticResource/master/images/AdminBook/client/bookdelete.png\" alt=\"bookdelete\"></li>\n</ul>\n<blockquote>\n<p>有种喜悦叫做从无到有。Server端的博客后续推出~敬请期待。</p>\n</blockquote>"},{"title":"基于Vue+iView+Koa+Mongodb的后台管理系统--服务端","date":"2017-05-17T13:20:00.000Z","_content":"> [上一篇博客](https://liujinhuan.github.io/2017/05/16/%E5%9F%BA%E4%BA%8EVue+iView+Koa+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F--%E5%AE%A2%E6%88%B7%E7%AB%AF/)中我们主要介绍了客户端的部分，今天来整理下服务端。Go。\n\n\n### Server搭建\n\n+ 全局安装koa脚手架工具[generator-koa2-rest](https://www.npmjs.com/package/generator-koa2-rest)\n\n```javascript\nnpm install -g generator-koa2-rest\n```\n\n+ 新建目录及初始化\n\n```javascript\nmkdir server && cd server && yo koa2-rest \n```\n\n<!-- more -->\n\n+ 安装依赖及运行\n\n```javascript\nnpm install --save && npm start\n```\n\n+ 数据库配置与链接\n\n```\nsrc/config/index.js\n----------------------------------------\nmongoIp: process.env.IP || 'localhost',\nmongoPort: 27017,\nmongoDbName: 'management'\n```\n\n```\nserver/index.js\n----------------------------------------\nconst mongoose = require('mongoose');\nconst db = mongoose.connect(\"mongodb://\"+config.mongoIp+\":\"+config.mongoPort+\"/\"+config.mongoDbName);\n```\n\n+ koa组件引入\n```\nimport cors from 'koa-cors';//为了解决跨域问题\nimport parser from 'koa-bodyparser';//框架自动引入的\napp.use(cors());\napp.use(parser({\n  strict: false\n}));\n```\n\n+ 业务路由创建，脚手架会自动创建model/controller\n```\nyo koa2-rest:api resource-name(如项目中的book/user/login等，按功能分类)\n```\n\n+ 路由配置：创建好的上述路由需在src/index中导出，以供routes配置使用\n```\nserver/src/index.js\n----------------------------------------\nexport root from './root';\nexport book from './book';\nexport user from './user';\nexport login from './login';\n```\n\n```\nserver/config/routes.js\n----------------------------------------\n'use strict';\n\nimport mount from 'koa-mount';\nimport { root } from '../api';\nimport { book } from '../api';\nimport { user } from '../api';\nimport { login } from '../api';\n\nexport default function configRoutes(app) {\n  app.use(mount('/', root.routes()));\n  // List Endpoints Here\n  app.use(mount('/book', book.routes()));// 接口访问的根路由\n  app.use(mount('/user', user.routes()));\n  app.use(mount('/login', login.routes()));\n}\n```\n\n\n### 过程记录\n\n+ 各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。（这话好像很熟悉的样子。哈哈）\n\n+ npm start报错，可以从以下几点查找原因\n\n| 可能原因 |  解决办法 | \n| ----    | :------------: | \n| node版本是否最新| 开发过程中安装某一个包时要求Node版本是最新。在控台终端可查看原因|\n| koa各中间件版本是否匹配| 在安装koa-bodyparser时候需要根据koa的版本进行匹配安装。因为koa的版本是@next，所以最后的安装语句为`npm i koa-bodyparser@next --save`。多加一个@next。在控台终端可查看原因|\n| mongodb是否启动 | 若没启动，控制台可见提示错误。需新建终端窗口，启动服务。指令为：`mongod`|\n\n+ 跨域问题\n\n项目的开发调试阶段一直在打开跨域访问的Chrome上进行(之前一直没发现)。后来在Safari上打开了一次，页面数据全没了。通过`console`窗口看到是数据跨域的问题。通过引入`koa-cors`中间件，解决该问题。\n\n```\nopen -a /Applications/Google\\ Chrome.app --args --disable-web-security --user-data-dir=/Users/电脑用户名/workspace/google\n```\n\n+ 调试问题\n\n请求的接口没有数据返回？首先可以查看终端server窗口是不是报错，根据提示，找到原因，解决报错。\n如果没有报错呢？我目前的方法是通过在可能出错的地方合理使用`console.log`进行调试。\n\n### 项目遗留\n\n+ 项目的部署\n\n据说是要选择一个服务器，然后可以通过pm2等方式进行部署。这个还没开始。有待补充~~\n\n\n> 一个人，在什么样的情况下，才会知道自己想要的到底是什么呢？\n\n\n\n\n","source":"_posts/基于Vue+iView+Koa+Mongodb的后台管理系统--服务端.md","raw":"---\ntitle: 基于Vue+iView+Koa+Mongodb的后台管理系统--服务端\ndate: 2017-5-17 21:20\ntags: \n\t- Vue\n\t- iView\n\t- Koa\n\t- Mongodb\n\t- vue-router\n\t- koa-router\n\t- vue-resource\n---\n> [上一篇博客](https://liujinhuan.github.io/2017/05/16/%E5%9F%BA%E4%BA%8EVue+iView+Koa+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F--%E5%AE%A2%E6%88%B7%E7%AB%AF/)中我们主要介绍了客户端的部分，今天来整理下服务端。Go。\n\n\n### Server搭建\n\n+ 全局安装koa脚手架工具[generator-koa2-rest](https://www.npmjs.com/package/generator-koa2-rest)\n\n```javascript\nnpm install -g generator-koa2-rest\n```\n\n+ 新建目录及初始化\n\n```javascript\nmkdir server && cd server && yo koa2-rest \n```\n\n<!-- more -->\n\n+ 安装依赖及运行\n\n```javascript\nnpm install --save && npm start\n```\n\n+ 数据库配置与链接\n\n```\nsrc/config/index.js\n----------------------------------------\nmongoIp: process.env.IP || 'localhost',\nmongoPort: 27017,\nmongoDbName: 'management'\n```\n\n```\nserver/index.js\n----------------------------------------\nconst mongoose = require('mongoose');\nconst db = mongoose.connect(\"mongodb://\"+config.mongoIp+\":\"+config.mongoPort+\"/\"+config.mongoDbName);\n```\n\n+ koa组件引入\n```\nimport cors from 'koa-cors';//为了解决跨域问题\nimport parser from 'koa-bodyparser';//框架自动引入的\napp.use(cors());\napp.use(parser({\n  strict: false\n}));\n```\n\n+ 业务路由创建，脚手架会自动创建model/controller\n```\nyo koa2-rest:api resource-name(如项目中的book/user/login等，按功能分类)\n```\n\n+ 路由配置：创建好的上述路由需在src/index中导出，以供routes配置使用\n```\nserver/src/index.js\n----------------------------------------\nexport root from './root';\nexport book from './book';\nexport user from './user';\nexport login from './login';\n```\n\n```\nserver/config/routes.js\n----------------------------------------\n'use strict';\n\nimport mount from 'koa-mount';\nimport { root } from '../api';\nimport { book } from '../api';\nimport { user } from '../api';\nimport { login } from '../api';\n\nexport default function configRoutes(app) {\n  app.use(mount('/', root.routes()));\n  // List Endpoints Here\n  app.use(mount('/book', book.routes()));// 接口访问的根路由\n  app.use(mount('/user', user.routes()));\n  app.use(mount('/login', login.routes()));\n}\n```\n\n\n### 过程记录\n\n+ 各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。（这话好像很熟悉的样子。哈哈）\n\n+ npm start报错，可以从以下几点查找原因\n\n| 可能原因 |  解决办法 | \n| ----    | :------------: | \n| node版本是否最新| 开发过程中安装某一个包时要求Node版本是最新。在控台终端可查看原因|\n| koa各中间件版本是否匹配| 在安装koa-bodyparser时候需要根据koa的版本进行匹配安装。因为koa的版本是@next，所以最后的安装语句为`npm i koa-bodyparser@next --save`。多加一个@next。在控台终端可查看原因|\n| mongodb是否启动 | 若没启动，控制台可见提示错误。需新建终端窗口，启动服务。指令为：`mongod`|\n\n+ 跨域问题\n\n项目的开发调试阶段一直在打开跨域访问的Chrome上进行(之前一直没发现)。后来在Safari上打开了一次，页面数据全没了。通过`console`窗口看到是数据跨域的问题。通过引入`koa-cors`中间件，解决该问题。\n\n```\nopen -a /Applications/Google\\ Chrome.app --args --disable-web-security --user-data-dir=/Users/电脑用户名/workspace/google\n```\n\n+ 调试问题\n\n请求的接口没有数据返回？首先可以查看终端server窗口是不是报错，根据提示，找到原因，解决报错。\n如果没有报错呢？我目前的方法是通过在可能出错的地方合理使用`console.log`进行调试。\n\n### 项目遗留\n\n+ 项目的部署\n\n据说是要选择一个服务器，然后可以通过pm2等方式进行部署。这个还没开始。有待补充~~\n\n\n> 一个人，在什么样的情况下，才会知道自己想要的到底是什么呢？\n\n\n\n\n","slug":"基于Vue+iView+Koa+Mongodb的后台管理系统--服务端","published":1,"updated":"2017-09-14T10:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmn8zohl001f2l7oh6gvkdyl","content":"<blockquote>\n<p><a href=\"https://liujinhuan.github.io/2017/05/16/%E5%9F%BA%E4%BA%8EVue+iView+Koa+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F--%E5%AE%A2%E6%88%B7%E7%AB%AF/\" target=\"_blank\" rel=\"noopener\">上一篇博客</a>中我们主要介绍了客户端的部分，今天来整理下服务端。Go。</p>\n</blockquote>\n<h3 id=\"Server搭建\"><a href=\"#Server搭建\" class=\"headerlink\" title=\"Server搭建\"></a>Server搭建</h3><ul>\n<li>全局安装koa脚手架工具<a href=\"https://www.npmjs.com/package/generator-koa2-rest\" target=\"_blank\" rel=\"noopener\">generator-koa2-rest</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-koa2-rest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建目录及初始化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir server &amp;&amp; cd server &amp;&amp; yo koa2-rest</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>安装依赖及运行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save &amp;&amp; npm start</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库配置与链接</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/config/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">mongoIp: process.env.IP || &apos;localhost&apos;,</span><br><span class=\"line\">mongoPort: 27017,</span><br><span class=\"line\">mongoDbName: &apos;management&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">const mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">const db = mongoose.connect(&quot;mongodb://&quot;+config.mongoIp+&quot;:&quot;+config.mongoPort+&quot;/&quot;+config.mongoDbName);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>koa组件引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cors from &apos;koa-cors&apos;;//为了解决跨域问题</span><br><span class=\"line\">import parser from &apos;koa-bodyparser&apos;;//框架自动引入的</span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">app.use(parser(&#123;</span><br><span class=\"line\">  strict: false</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>业务路由创建，脚手架会自动创建model/controller</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo koa2-rest:api resource-name(如项目中的book/user/login等，按功能分类)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路由配置：创建好的上述路由需在src/index中导出，以供routes配置使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/src/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">export root from &apos;./root&apos;;</span><br><span class=\"line\">export book from &apos;./book&apos;;</span><br><span class=\"line\">export user from &apos;./user&apos;;</span><br><span class=\"line\">export login from &apos;./login&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/config/routes.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import mount from &apos;koa-mount&apos;;</span><br><span class=\"line\">import &#123; root &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; book &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; user &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; login &#125; from &apos;../api&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function configRoutes(app) &#123;</span><br><span class=\"line\">  app.use(mount(&apos;/&apos;, root.routes()));</span><br><span class=\"line\">  // List Endpoints Here</span><br><span class=\"line\">  app.use(mount(&apos;/book&apos;, book.routes()));// 接口访问的根路由</span><br><span class=\"line\">  app.use(mount(&apos;/user&apos;, user.routes()));</span><br><span class=\"line\">  app.use(mount(&apos;/login&apos;, login.routes()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><ul>\n<li><p>各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。（这话好像很熟悉的样子。哈哈）</p>\n</li>\n<li><p>npm start报错，可以从以下几点查找原因</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>可能原因</th>\n<th style=\"text-align:center\">解决办法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node版本是否最新</td>\n<td style=\"text-align:center\">开发过程中安装某一个包时要求Node版本是最新。在控台终端可查看原因</td>\n</tr>\n<tr>\n<td>koa各中间件版本是否匹配</td>\n<td style=\"text-align:center\">在安装koa-bodyparser时候需要根据koa的版本进行匹配安装。因为koa的版本是@next，所以最后的安装语句为<code>npm i koa-bodyparser@next --save</code>。多加一个@next。在控台终端可查看原因</td>\n</tr>\n<tr>\n<td>mongodb是否启动</td>\n<td style=\"text-align:center\">若没启动，控制台可见提示错误。需新建终端窗口，启动服务。指令为：<code>mongod</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>跨域问题</li>\n</ul>\n<p>项目的开发调试阶段一直在打开跨域访问的Chrome上进行(之前一直没发现)。后来在Safari上打开了一次，页面数据全没了。通过<code>console</code>窗口看到是数据跨域的问题。通过引入<code>koa-cors</code>中间件，解决该问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open -a /Applications/Google\\ Chrome.app --args --disable-web-security --user-data-dir=/Users/电脑用户名/workspace/google</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调试问题</li>\n</ul>\n<p>请求的接口没有数据返回？首先可以查看终端server窗口是不是报错，根据提示，找到原因，解决报错。<br>如果没有报错呢？我目前的方法是通过在可能出错的地方合理使用<code>console.log</code>进行调试。</p>\n<h3 id=\"项目遗留\"><a href=\"#项目遗留\" class=\"headerlink\" title=\"项目遗留\"></a>项目遗留</h3><ul>\n<li>项目的部署</li>\n</ul>\n<p>据说是要选择一个服务器，然后可以通过pm2等方式进行部署。这个还没开始。有待补充~~</p>\n<blockquote>\n<p>一个人，在什么样的情况下，才会知道自己想要的到底是什么呢？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"https://liujinhuan.github.io/2017/05/16/%E5%9F%BA%E4%BA%8EVue+iView+Koa+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F--%E5%AE%A2%E6%88%B7%E7%AB%AF/\" target=\"_blank\" rel=\"noopener\">上一篇博客</a>中我们主要介绍了客户端的部分，今天来整理下服务端。Go。</p>\n</blockquote>\n<h3 id=\"Server搭建\"><a href=\"#Server搭建\" class=\"headerlink\" title=\"Server搭建\"></a>Server搭建</h3><ul>\n<li>全局安装koa脚手架工具<a href=\"https://www.npmjs.com/package/generator-koa2-rest\" target=\"_blank\" rel=\"noopener\">generator-koa2-rest</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-koa2-rest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建目录及初始化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir server &amp;&amp; cd server &amp;&amp; yo koa2-rest</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>安装依赖及运行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save &amp;&amp; npm start</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库配置与链接</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/config/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">mongoIp: process.env.IP || &apos;localhost&apos;,</span><br><span class=\"line\">mongoPort: 27017,</span><br><span class=\"line\">mongoDbName: &apos;management&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">const mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">const db = mongoose.connect(&quot;mongodb://&quot;+config.mongoIp+&quot;:&quot;+config.mongoPort+&quot;/&quot;+config.mongoDbName);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>koa组件引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cors from &apos;koa-cors&apos;;//为了解决跨域问题</span><br><span class=\"line\">import parser from &apos;koa-bodyparser&apos;;//框架自动引入的</span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">app.use(parser(&#123;</span><br><span class=\"line\">  strict: false</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>业务路由创建，脚手架会自动创建model/controller</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo koa2-rest:api resource-name(如项目中的book/user/login等，按功能分类)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路由配置：创建好的上述路由需在src/index中导出，以供routes配置使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/src/index.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">export root from &apos;./root&apos;;</span><br><span class=\"line\">export book from &apos;./book&apos;;</span><br><span class=\"line\">export user from &apos;./user&apos;;</span><br><span class=\"line\">export login from &apos;./login&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/config/routes.js</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import mount from &apos;koa-mount&apos;;</span><br><span class=\"line\">import &#123; root &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; book &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; user &#125; from &apos;../api&apos;;</span><br><span class=\"line\">import &#123; login &#125; from &apos;../api&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function configRoutes(app) &#123;</span><br><span class=\"line\">  app.use(mount(&apos;/&apos;, root.routes()));</span><br><span class=\"line\">  // List Endpoints Here</span><br><span class=\"line\">  app.use(mount(&apos;/book&apos;, book.routes()));// 接口访问的根路由</span><br><span class=\"line\">  app.use(mount(&apos;/user&apos;, user.routes()));</span><br><span class=\"line\">  app.use(mount(&apos;/login&apos;, login.routes()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><ul>\n<li><p>各技术栈的官网还是要提前看一下，不然撸起代码都不顺畅。（这话好像很熟悉的样子。哈哈）</p>\n</li>\n<li><p>npm start报错，可以从以下几点查找原因</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>可能原因</th>\n<th style=\"text-align:center\">解决办法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node版本是否最新</td>\n<td style=\"text-align:center\">开发过程中安装某一个包时要求Node版本是最新。在控台终端可查看原因</td>\n</tr>\n<tr>\n<td>koa各中间件版本是否匹配</td>\n<td style=\"text-align:center\">在安装koa-bodyparser时候需要根据koa的版本进行匹配安装。因为koa的版本是@next，所以最后的安装语句为<code>npm i koa-bodyparser@next --save</code>。多加一个@next。在控台终端可查看原因</td>\n</tr>\n<tr>\n<td>mongodb是否启动</td>\n<td style=\"text-align:center\">若没启动，控制台可见提示错误。需新建终端窗口，启动服务。指令为：<code>mongod</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>跨域问题</li>\n</ul>\n<p>项目的开发调试阶段一直在打开跨域访问的Chrome上进行(之前一直没发现)。后来在Safari上打开了一次，页面数据全没了。通过<code>console</code>窗口看到是数据跨域的问题。通过引入<code>koa-cors</code>中间件，解决该问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open -a /Applications/Google\\ Chrome.app --args --disable-web-security --user-data-dir=/Users/电脑用户名/workspace/google</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调试问题</li>\n</ul>\n<p>请求的接口没有数据返回？首先可以查看终端server窗口是不是报错，根据提示，找到原因，解决报错。<br>如果没有报错呢？我目前的方法是通过在可能出错的地方合理使用<code>console.log</code>进行调试。</p>\n<h3 id=\"项目遗留\"><a href=\"#项目遗留\" class=\"headerlink\" title=\"项目遗留\"></a>项目遗留</h3><ul>\n<li>项目的部署</li>\n</ul>\n<p>据说是要选择一个服务器，然后可以通过pm2等方式进行部署。这个还没开始。有待补充~~</p>\n<blockquote>\n<p>一个人，在什么样的情况下，才会知道自己想要的到底是什么呢？</p>\n</blockquote>"},{"title":"微信小程序和H5页面之间的通信","date":"2018-09-29T09:43:00.000Z","_content":"\n> 小程序和h5页面之间的通信\n\n### 前言\n\n+ 小程序webview组件对嵌入的H5页面有要求、必须在小程序管理后台配置为`合法的业务域名`。\n+ H5页面调用小程序的能力有限，详情可参见微信小程序API\n\n### H5端\n\n+ H5页面需要引用微信提供的官方sdk\n```\nhttps://res.wx.qq.com/open/js/jweixin-1.3.2.js\n```\n\n+ 在按钮点击处，给小程序发送信息\n```\n<!-- 具体参数、具体分析 -->\nwx.miniProgram.postMessage({ data: 'foo' })\n<!-- 详见`坑`处的说明 -->\nwx.miniProgram.navigateBack()\n```\n<!-- more -->\n\n### 小程序端\n\n+ 页面中添加`webview`组件、并添加监听事件\n```\n<web-view src='{{url}}' bindmessage='receivePostMsg'></web-view>\n```\n\n+ js里面添加监听事件,`e.detail`里面可以看到传递的参数，根据收到的信息进行相应操作\n```\nreceivePostMsg:function(e){\n    console.log(\"收到的消息是\",e)\n    app.globalData.isSHowKefu = true\n}\n```\n\n\n### 坑\n\n+ 网页向小程序 postMessage 时，会在特定时机（小程序后退、组件销毁、分享）触发并收到消息。所以想收到消息的时候，就要做下上面的操作才可以。比如发消息之后，在执行个页面回退等。\n```\n<!--具体参数再商议-->\nwx.miniProgram.postMessage({ data: 'foo' })\n<!--需回退到小程序上层页面-->\nwx.miniProgram.navigateBack()\n```\n","source":"_posts/微信小程序和H5页面之间的通信.md","raw":"---\ntitle: 微信小程序和H5页面之间的通信\ndate: 2018-9-29 17:43:00\ntags: \n    - wxMiniprogram\n    - h5\n---\n\n> 小程序和h5页面之间的通信\n\n### 前言\n\n+ 小程序webview组件对嵌入的H5页面有要求、必须在小程序管理后台配置为`合法的业务域名`。\n+ H5页面调用小程序的能力有限，详情可参见微信小程序API\n\n### H5端\n\n+ H5页面需要引用微信提供的官方sdk\n```\nhttps://res.wx.qq.com/open/js/jweixin-1.3.2.js\n```\n\n+ 在按钮点击处，给小程序发送信息\n```\n<!-- 具体参数、具体分析 -->\nwx.miniProgram.postMessage({ data: 'foo' })\n<!-- 详见`坑`处的说明 -->\nwx.miniProgram.navigateBack()\n```\n<!-- more -->\n\n### 小程序端\n\n+ 页面中添加`webview`组件、并添加监听事件\n```\n<web-view src='{{url}}' bindmessage='receivePostMsg'></web-view>\n```\n\n+ js里面添加监听事件,`e.detail`里面可以看到传递的参数，根据收到的信息进行相应操作\n```\nreceivePostMsg:function(e){\n    console.log(\"收到的消息是\",e)\n    app.globalData.isSHowKefu = true\n}\n```\n\n\n### 坑\n\n+ 网页向小程序 postMessage 时，会在特定时机（小程序后退、组件销毁、分享）触发并收到消息。所以想收到消息的时候，就要做下上面的操作才可以。比如发消息之后，在执行个页面回退等。\n```\n<!--具体参数再商议-->\nwx.miniProgram.postMessage({ data: 'foo' })\n<!--需回退到小程序上层页面-->\nwx.miniProgram.navigateBack()\n```\n","slug":"微信小程序和H5页面之间的通信","published":1,"updated":"2018-09-29T10:19:38.000Z","_id":"cjmn9116u001o2l7osehx7hny","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>小程序和h5页面之间的通信</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>小程序webview组件对嵌入的H5页面有要求、必须在小程序管理后台配置为<code>合法的业务域名</code>。</li>\n<li>H5页面调用小程序的能力有限，详情可参见微信小程序API</li>\n</ul>\n<h3 id=\"H5端\"><a href=\"#H5端\" class=\"headerlink\" title=\"H5端\"></a>H5端</h3><ul>\n<li><p>H5页面需要引用微信提供的官方sdk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://res.wx.qq.com/open/js/jweixin-1.3.2.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在按钮点击处，给小程序发送信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 具体参数、具体分析 --&gt;</span><br><span class=\"line\">wx.miniProgram.postMessage(&#123; data: &apos;foo&apos; &#125;)</span><br><span class=\"line\">&lt;!-- 详见`坑`处的说明 --&gt;</span><br><span class=\"line\">wx.miniProgram.navigateBack()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"小程序端\"><a href=\"#小程序端\" class=\"headerlink\" title=\"小程序端\"></a>小程序端</h3><ul>\n<li><p>页面中添加<code>webview</code>组件、并添加监听事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;web-view src=&apos;&#123;&#123;url&#125;&#125;&apos; bindmessage=&apos;receivePostMsg&apos;&gt;&lt;/web-view&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js里面添加监听事件,<code>e.detail</code>里面可以看到传递的参数，根据收到的信息进行相应操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">receivePostMsg:function(e)&#123;</span><br><span class=\"line\">    console.log(&quot;收到的消息是&quot;,e)</span><br><span class=\"line\">    app.globalData.isSHowKefu = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><ul>\n<li>网页向小程序 postMessage 时，会在特定时机（小程序后退、组件销毁、分享）触发并收到消息。所以想收到消息的时候，就要做下上面的操作才可以。比如发消息之后，在执行个页面回退等。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--具体参数再商议--&gt;</span><br><span class=\"line\">wx.miniProgram.postMessage(&#123; data: &apos;foo&apos; &#125;)</span><br><span class=\"line\">&lt;!--需回退到小程序上层页面--&gt;</span><br><span class=\"line\">wx.miniProgram.navigateBack()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>小程序和h5页面之间的通信</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>小程序webview组件对嵌入的H5页面有要求、必须在小程序管理后台配置为<code>合法的业务域名</code>。</li>\n<li>H5页面调用小程序的能力有限，详情可参见微信小程序API</li>\n</ul>\n<h3 id=\"H5端\"><a href=\"#H5端\" class=\"headerlink\" title=\"H5端\"></a>H5端</h3><ul>\n<li><p>H5页面需要引用微信提供的官方sdk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://res.wx.qq.com/open/js/jweixin-1.3.2.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在按钮点击处，给小程序发送信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 具体参数、具体分析 --&gt;</span><br><span class=\"line\">wx.miniProgram.postMessage(&#123; data: &apos;foo&apos; &#125;)</span><br><span class=\"line\">&lt;!-- 详见`坑`处的说明 --&gt;</span><br><span class=\"line\">wx.miniProgram.navigateBack()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h3 id=\"小程序端\"><a href=\"#小程序端\" class=\"headerlink\" title=\"小程序端\"></a>小程序端</h3><ul>\n<li><p>页面中添加<code>webview</code>组件、并添加监听事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;web-view src=&apos;&#123;&#123;url&#125;&#125;&apos; bindmessage=&apos;receivePostMsg&apos;&gt;&lt;/web-view&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js里面添加监听事件,<code>e.detail</code>里面可以看到传递的参数，根据收到的信息进行相应操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">receivePostMsg:function(e)&#123;</span><br><span class=\"line\">    console.log(&quot;收到的消息是&quot;,e)</span><br><span class=\"line\">    app.globalData.isSHowKefu = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><ul>\n<li>网页向小程序 postMessage 时，会在特定时机（小程序后退、组件销毁、分享）触发并收到消息。所以想收到消息的时候，就要做下上面的操作才可以。比如发消息之后，在执行个页面回退等。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--具体参数再商议--&gt;</span><br><span class=\"line\">wx.miniProgram.postMessage(&#123; data: &apos;foo&apos; &#125;)</span><br><span class=\"line\">&lt;!--需回退到小程序上层页面--&gt;</span><br><span class=\"line\">wx.miniProgram.navigateBack()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjmn8zog700002l7oeyehhnmg","tag_id":"cjmn8zogd00022l7o3hv04tmw","_id":"cjmn8zogl000d2l7oxjum0a5j"},{"post_id":"cjmn8zog700002l7oeyehhnmg","tag_id":"cjmn8zogi00062l7ono1k499u","_id":"cjmn8zogm000e2l7oxaph8v9y"},{"post_id":"cjmn8zog700002l7oeyehhnmg","tag_id":"cjmn8zogk00092l7o22vtgrwz","_id":"cjmn8zogm000g2l7ov0sloqp9"},{"post_id":"cjmn8zog700002l7oeyehhnmg","tag_id":"cjmn8zogl000a2l7o69ooylnf","_id":"cjmn8zogm000h2l7odme412ts"},{"post_id":"cjmn8zog700002l7oeyehhnmg","tag_id":"cjmn8zogl000b2l7o0apby0k5","_id":"cjmn8zogn000j2l7oajhifp8f"},{"post_id":"cjmn8zogb00012l7orz28jca6","tag_id":"cjmn8zogl000c2l7otf7ipac9","_id":"cjmn8zogn000k2l7ohpbqqq56"},{"post_id":"cjmn8zogb00012l7orz28jca6","tag_id":"cjmn8zogm000f2l7oah3lx3q5","_id":"cjmn8zogo000m2l7o658bti02"},{"post_id":"cjmn8zogf00032l7ool9yxptq","tag_id":"cjmn8zogl000c2l7otf7ipac9","_id":"cjmn8zogp000o2l7oijq3g82t"},{"post_id":"cjmn8zogf00032l7ool9yxptq","tag_id":"cjmn8zogm000f2l7oah3lx3q5","_id":"cjmn8zogp000p2l7okf62z1ks"},{"post_id":"cjmn8zogg00042l7odj6pz5h0","tag_id":"cjmn8zogl000c2l7otf7ipac9","_id":"cjmn8zogq000t2l7oy7sr52d5"},{"post_id":"cjmn8zogg00042l7odj6pz5h0","tag_id":"cjmn8zogi00062l7ono1k499u","_id":"cjmn8zogq000u2l7ojyc6xokh"},{"post_id":"cjmn8zogg00042l7odj6pz5h0","tag_id":"cjmn8zogm000f2l7oah3lx3q5","_id":"cjmn8zogr000w2l7o88xrxvds"},{"post_id":"cjmn8zogh00052l7oqi09eycn","tag_id":"cjmn8zogm000f2l7oah3lx3q5","_id":"cjmn8zogr000x2l7ozpfuwf7u"},{"post_id":"cjmn8zogj00072l7oh7uiipdh","tag_id":"cjmn8zogq000v2l7oton03gbi","_id":"cjmn8zogr00102l7omvewfe87"},{"post_id":"cjmn8zogj00072l7oh7uiipdh","tag_id":"cjmn8zogr000y2l7ok7n7zj95","_id":"cjmn8zogr00112l7orhma5lyn"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogr000z2l7o5s46iq14","_id":"cjmn8zogt00182l7oiil2b5il"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogr00122l7o0iz9l8ul","_id":"cjmn8zogt00192l7oco32gf1l"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogs00132l7ofanmjvme","_id":"cjmn8zogt001a2l7ogboik3ti"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogs00142l7o0bu4jwvh","_id":"cjmn8zogt001b2l7onuooir6p"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogs00152l7o1drugr4t","_id":"cjmn8zogt001c2l7o6mpoc1al"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogs00162l7oy0y0amxv","_id":"cjmn8zogt001d2l7oq7a9394d"},{"post_id":"cjmn8zogk00082l7oqq27w99i","tag_id":"cjmn8zogs00172l7o6lv6tbzz","_id":"cjmn8zogt001e2l7obmmzlxae"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogr000z2l7o5s46iq14","_id":"cjmn8zohn001g2l7oizkcdbdi"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogr00122l7o0iz9l8ul","_id":"cjmn8zohn001h2l7o26mapswp"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogs00132l7ofanmjvme","_id":"cjmn8zohn001i2l7o6vqm000t"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogs00142l7o0bu4jwvh","_id":"cjmn8zoho001j2l7oi0vjvld4"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogs00152l7o1drugr4t","_id":"cjmn8zoho001k2l7o8j047rhw"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogs00162l7oy0y0amxv","_id":"cjmn8zoho001l2l7oyccq04za"},{"post_id":"cjmn8zohl001f2l7oh6gvkdyl","tag_id":"cjmn8zogs00172l7o6lv6tbzz","_id":"cjmn8zohp001m2l7o32heiffp"},{"post_id":"cjmn9116u001o2l7osehx7hny","tag_id":"cjmn925c9001p2l7ob3a44ozx","_id":"cjmn925ca001r2l7o05t0v3ag"},{"post_id":"cjmn9116u001o2l7osehx7hny","tag_id":"cjmn925ca001q2l7optvvb9nl","_id":"cjmn925ca001s2l7oiaksn8kt"}],"Tag":[{"name":"XSS","_id":"cjmn8zogd00022l7o3hv04tmw"},{"name":"Node","_id":"cjmn8zogi00062l7ono1k499u"},{"name":"Express","_id":"cjmn8zogk00092l7o22vtgrwz"},{"name":"ejs","_id":"cjmn8zogl000a2l7o69ooylnf"},{"name":"web安全","_id":"cjmn8zogl000b2l7o0apby0k5"},{"name":"MongoDB","_id":"cjmn8zogl000c2l7otf7ipac9"},{"name":"Mac","_id":"cjmn8zogm000f2l7oah3lx3q5"},{"name":"html","_id":"cjmn8zogq000v2l7oton03gbi"},{"name":"html5","_id":"cjmn8zogr000y2l7ok7n7zj95"},{"name":"Vue","_id":"cjmn8zogr000z2l7o5s46iq14"},{"name":"iView","_id":"cjmn8zogr00122l7o0iz9l8ul"},{"name":"Koa","_id":"cjmn8zogs00132l7ofanmjvme"},{"name":"Mongodb","_id":"cjmn8zogs00142l7o0bu4jwvh"},{"name":"vue-router","_id":"cjmn8zogs00152l7o1drugr4t"},{"name":"koa-router","_id":"cjmn8zogs00162l7oy0y0amxv"},{"name":"vue-resource","_id":"cjmn8zogs00172l7o6lv6tbzz"},{"name":"wxMiniprogram","_id":"cjmn925c9001p2l7ob3a44ozx"},{"name":"h5","_id":"cjmn925ca001q2l7optvvb9nl"}]}}